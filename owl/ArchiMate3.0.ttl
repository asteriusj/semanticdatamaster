@prefix :      <http://www.plminterop.org/archimate/> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .

:CompositionR  a                owl:ObjectProperty ;
        rdfs:subPropertyOf      :StructuralRelationship ;
        owl:inverseOf           :Inverse_of_composition ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForComposition :TargetRelationshipForComposition ) .

:Specialization_relation_from_node
        a                   owl:ObjectProperty ;
        rdfs:domain         :Node ;
        rdfs:range          :Node , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:inverse_of_access  a       owl:ObjectProperty ;
        rdfs:subPropertyOf  :DependencyRelationShip .

:Application_Collaboration
        a                owl:Class ;
        rdfs:comment     "An application collaboration specifies which components cooperate to perform some task. The collaborative behavior, including, for example, the communication pattern of these components, is modeled by an application interaction. An application collaboration typically models a logical\nor temporary collaboration of application components, and does not exist as a separate entity in the enterprise.\nApplication collaboration is a specialization of component, and aggregates two or more (cooperating) application components. An application collaboration is an active structure element that may be assigned to one or more application interactions or other application internal behavior elements, which model the associated behavior. An application interface may serve an application collaboration, and an application collaboration may be composed of application interfaces. The name of an application collaboration should preferably be a noun."@en , "An application collaboration represents an aggregate of two or more application components that work together to perform collective application behavior."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :Influencer_Type1 , :Realization_Type2 , :Source_Type2 , :Collaboration , :ApplicationElement , :Accessor_Type1 , :Serving_Type1 .

:Specialization_relation_from_businessEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Event ;
        rdfs:range          :Requirement , :Business_Event ;
        rdfs:subPropertyOf  :SpecializationR .

:Association  a          owl:Class , owl:AnnotationProperty ;
        rdfs:subClassOf  :OtherRelationship .

:PassiveStructureElement
        a                owl:Class ;
        rdfs:comment     "The passive counterpart of the application component in the Application Layer is called a data object. This element is used in the same way as data objects (or object types) in well-known data modeling approaches, most notably the “class” concept in UML class diagrams. A data object can be seen as a representation of a business object, as a counterpart of the representation element in the Business Layer. The ArchiMate language does not define a specific layer for information; however, elements such as business objects and data objects are used to represent the information entities and also the logical data components that realize the business objects."@en , "A technology object models the passive structure elements that are used and processed by the infrastructure. An artifact is a physical piece of information that is used or produced in a software development process, or by deployment and operation of a system. It is the representation, in the form of, for example, a file, of a data object, or an application component, and can be deployed on a node. The artifact element has been taken from UML [8]."@en , "A passive structure element is a structural element that cannot perform behavior."@en ;
        rdfs:subClassOf  :StructureElement .

:Specialization_relation_from_plateau
        a                   owl:ObjectProperty ;
        rdfs:domain         :Plateau ;
        rdfs:range          :Plateau , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:ArchiMateModelingRelation
        a       owl:Class .

:Constraint  a           owl:Class ;
        rdfs:comment     "In contrast to a requirement, a constraint does not prescribe some intended functionality of the system to be realized, but imposes a restriction on the way it operates or may be realized. This may be a restriction on the implementation of the system (e.g., specific technology that is to be used), a restriction on the implementation process (e.g., time or budget constraints), or a restriction on the functioning of the system (e.g., legal constraints)."@en , "Example\nThe goal Improve Profitability of Service Offering is realized by the outcome Increased Profit. This outcome is influenced positively by the outcomes Increased Revenue and Reduced Cost of Customer Acquisition. The outcome Increased Revenue is influenced positively by an outcome Increased Market Share. Both of these outcomes are realized by a combination of two principles: Serve Customers Wherever They Are and Serve Customers Whenever They Need Our Help. Both of these principles are realized by a combination of two requirements: Mobile Applications Shall Run On All Popular Mobile Platforms and Services Shall Be Accessible Through Mobile Browsers. The goal Reduced Cost Of Customer Acquisition is realized by a principle Respond To Changing Customer Needs, Preferences, And Expectations Quickly And Efficiently, which in turn is realized by a constraint Mobile Applications Shall Be Built With Cross-Platform Frameworks."@en , "A constraint represents a factor that prevents or obstructs the realization of goals."@en ;
        rdfs:subClassOf  :Requirement , :Influencer_Type2 .

:Specialization_relation_from_assessment
        a                   owl:ObjectProperty ;
        rdfs:domain         :Assessment ;
        rdfs:range          :Grouping , :Assessment ;
        rdfs:subPropertyOf  :SpecializationR .

:Realization_relation_from_applicationInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Interface ;
        rdfs:range          :Junction , :Grouping , :Business_Service , :Business_Interface ;
        rdfs:subPropertyOf  :RealizationR .

:SourceRelationshipForServing
        a                   owl:ObjectProperty ;
        rdfs:domain         :Serving ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForServing .

:SourceRelationshipForAggregation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Aggregation ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForAggregation .

:SourceRelationshipForTriggering
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForTriggering .

:Junction  a             owl:Class ;
        rdfs:comment     "A junction is used to connect relationships of the same type."@en , "Junctions used on triggering relationships are similar to gateways in BPMN and forks and joins in UML activity diagrams. They can be used to model high-level process flow. A label may be added to outgoing triggering relationships of a junction to indicate a choice, condition, or guard that applies to that relationship. Such a label is only an informal indication. No formal, operational semantics has been defined for these relationships, because implementation-level languages such as BPMN and UML differ in their execution semantics and the ArchiMate language does not want to unduly constrain mappings to such languages."@en , "A junction is used in a number of situations to connect relationships of the same type. A junction may have multiple incoming relationships and one outgoing relationship, one incoming relationship and multiple outgoing relationships, or multiple incoming and outgoing relationships (the latter can be considered a shorthand of two subsequent junctions).\nThe relationships that can be used in combination with a junction are all the dynamic and dependency relationships, as well as assignment, realization, and association. A junction is used to explicitly express that several elements together participate in the relationship (and junction) or that one of the elements participates in the relationship (or junction). A junction should either have one incoming and more than one outgoing relationships, or more than one incoming and one outgoing. It is allowed to omit arrowheads of relationships leading into a junction."@en ;
        rdfs:subClassOf  :Source_Type3 , :Triggering_Type4 , :Source_Type2 , :Triggering_Type3 , :RelationshipConnector , :Influencer_Type1 , :Triggering_Type2 , :Source_Type1 , :OtherElements , :Triggering_Type1 .

:Aggregated_by_implementationEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Implementation_Event ;
        rdfs:range          :Implementation_Event , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_businessRole
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Role ;
        rdfs:range          :Grouping , :Business_Role ;
        rdfs:subPropertyOf  :SpecializationR .

_:b0    a                   owl:Restriction ;
        owl:onProperty      :inverse_of_SourceRelationshipForAccess ;
        owl:someValuesFrom  :Accessor_Type2 .

:Aggregated_by_outcome
        a                   owl:ObjectProperty ;
        rdfs:domain         :Outcome ;
        rdfs:range          :Outcome , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Business_Role  a        owl:Class ;
        rdfs:comment     "Business roles with certain responsibilities or skills are assigned to business processes or business functions. A business actor that is assigned to a business role is responsible that the corresponding behavior is carried out, either by performing it or by delegating and managing its performance. In addition to the relation of a business role with behavior, a business role is also useful in a (structural) organizational sense; for instance, in the division of labor within an organization.\nA business role may be assigned to one or more business processes or business functions, while a business actor may be assigned to one or more business roles. A business interface or an application interface may serve a business role, while a business interface may be part of a business role. The name of a business role should preferably be a noun."@en , "A business role is the responsibility for performing specific behavior, to which an actor can be assigned, or the part an actor plays in a particular action or event."@en ;
        rdfs:subClassOf  :BusinessElement , :InternalActiveStructureElement , :Serving_Type1 , :Influencer_Type1 , :Triggering_Type1 , :Accessor_Type1 , :Source_Type2 .

:Specialization_relation_from_deliverable
        a                   owl:ObjectProperty ;
        rdfs:domain         :Deliverable ;
        rdfs:range          :Grouping , :Deliverable ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_artifact
        a                   owl:ObjectProperty ;
        rdfs:domain         :Artifact ;
        rdfs:range          :Grouping , :Artifact ;
        rdfs:subPropertyOf  :AggregationR .

:Representation  a       owl:Class ;
        rdfs:comment     "Representations (for example, messages or documents) are the perceptible carriers of information that are related to business objects. If relevant, representations can be classified in various ways; for example, in terms of medium (electronic, paper, audio, etc.) or format (HTML,ASCII, PDF, RTF, etc.). A single business object can have a number of different representations. Also, a single representation can realize one or more specific business objects.\nA meaning can be associated with a representation that carries this meaning. The name of a representation is preferably a noun."@en , "A representation represents a perceptible form of the information carried by a business object."@en ;
        rdfs:subClassOf  :PassiveStructureElement , :Influencer_Type2 , :BusinessElement .

:Access_relation_from_accessor_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Accessor_Type2 ;
        rdfs:range          [ a            owl:Class ;
                              owl:unionOf  ( :Business_Object :Contract :Grouping :Junction :Representation )
                            ] ;
        rdfs:subPropertyOf  :AccessR .

:inverse_of_TargetRelationshipForAccess
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Inverse_of_Influence
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :DependencyRelationShip .

:Gap    a                owl:Class ;
        rdfs:comment     "he gap element is associated with two plateaus (e.g., Baseline and Target Architectures, or two subsequent Transition Architectures), and represents the differences between these plateaus.\nIn the TOGAF framework [4], a gap is an important outcome of a gap analysis in Phases B, C, and D of the ADM process, and forms an important input for the subsequent implementation and migration planning."@en , "A gap represents a statement of difference between two plateaus."@en ;
        rdfs:subClassOf  :ImplementationMigrationElement .

:Specialization_relation_from_meaning
        a                   owl:ObjectProperty ;
        rdfs:domain         :Meaning ;
        rdfs:range          :Meaning , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:inverse_of_TargetRelationshipForAggregation
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:RelationshipConnector
        a                owl:Class ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:Realization_relation_from_realization_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Realization_Type2 ;
        rdfs:range          :Business_Collaboration , :Application_Process , :Junction , :Business_Event , :Requirement , :Application_Service , :Application_Interface , :Constraint , :Business_Function , :Business_Process , :Application_Collaboration , :Principle , :Grouping , :Business_Interaction , :Business_Interface , :Application_Interaction , :Application_Function , :Goal , :Application_Component , :Outcome , :Business_Service , :Application_Event ;
        rdfs:subPropertyOf  :RealizationR .

:TargetRelationshipForAssociation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Association ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForAssociation .

:Inverse_of_triggering
        a                   owl:TransitiveProperty , owl:ObjectProperty ;
        rdfs:subPropertyOf  :DynamicRelationship ;
        owl:inverseOf       :TriggeringR .

:Aggregated_by_courseOfAction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Course_of_Action ;
        rdfs:range          :Grouping , :Course_of_Action ;
        rdfs:subPropertyOf  :AggregationR .

:Business_Actor  a       owl:Class ;
        rdfs:comment     "A business actor is a business entity that is capable of performing behavior."@en , "A business actor is a business entity as opposed to a technical entity; i.e., it belongs to the Business Layer. Actors may, however, include entities outside the actual organization; e.g., customers and partners. A business actor can represent such business entities at different levels of detail, and may correspond to both an actor and an organizational unit in the TOGAF framework [4]. Examples of business actors are humans, departments, and business units.\nA business actor may be assigned to one or more business roles. It can then perform the behavior to which these business roles are assigned. A business actor can be aggregated in a location. The name of a business actor should preferably be a noun. Business actors may be specific individuals or organizations; e.g., “John Smith” or “ABC Corporation”, or they may be generic; e.g., “Customer” or “Supplier”."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :BusinessElement , :Accessor_Type1 , :Influencer_Type1 , :Triggering_Type1 , :InternalActiveStructureElement .

:Specialization_relation_from_businessCollaboration
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Collaboration ;
        rdfs:range          :Grouping , :Business_Collaboration ;
        rdfs:subPropertyOf  :SpecializationR .

:OtherElements  a        owl:Class ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:TargetRelationshipForServing
        a                   owl:ObjectProperty ;
        rdfs:domain         :Serving ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForServing .

:Equipment  a            owl:Class ;
        rdfs:subClassOf  :Triggering_Type1 , :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Node , :Influencer_Type1 , :Accessor_Type1 .

:Application_Function
        a                owl:Class ;
        rdfs:comment     "An application function represents automated behavior that can be performed by an application component."@en , "An application function describes the internal behavior of an application component. If this behavior is exposed externally, this is done through one or more services. An application function abstracts from the way it is implemented. Only the necessary behavior is specified.\nAn application function may realize one or more application services. Application services of other application functions and technology services may serve an application function. An application function may access data objects. An application component may be assigned to an application function (which means that the application component performs the application function). The name of an application function should preferably be a verb ending with “ing”; e.g., “accounting”."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :Function , :ApplicationElement , :Accessor_Type1 .

:aggregation_006  a  :Aggregation , owl:NamedIndividual .

:inverse_of_SourceRelationshipForSpecialization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Specialization_relation_from_courseOfAction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Course_of_Action ;
        rdfs:range          :Grouping , :Course_of_Action ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForRealization
        a                   owl:ObjectProperty ;
        rdfs:domain         :Realization ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForRealization .

:Inverse_of_used_by  a      owl:ObjectProperty ;
        rdfs:label          "Uses" ;
        rdfs:subPropertyOf  :DependencyRelationShip ;
        owl:inverseOf       :Used_by .

:ElementSpecialization
        a                owl:Class ;
        rdfs:comment     "Specialization is a simple and powerful way to define new elements or relationships based on the existing ones. Specialized elements inherit the properties of their generalized elements (including the relationships that are allowed for the element), but some of the relationships that apply to the specialized element need not be allowed for the generalized element. Also, new graphical notation could be introduced for a specialized concept, but preferably with a resemblance to the notation of the generalized concept; e.g., by adding an icon or other graphical marker, or changing the existing icon. A specialized element or relationship strongly resembles a stereotype as it is used in UML. The stereotype notation with angled brackets may also be used to denote a specialized concept. Finally, for a specialized concept, certain attributes may be predefined, as described in the previous section.\nSpecialization of relationships is also allowed. Similar to specialization of elements, a specialized relationship inherits all properties of its “parent” relationship, with possible additional restrictions. For example, two specializations of the assignment relationship may be used to model responsibility versus accountability. Another example is a specialization of the flow relationship to model material flow in a supply chain.\nSpecialization of elements and relationships provides extra flexibility, as it allows organizations or individual users to customize the language to their own preferences and needs, while the underlying precise definition of the concepts is preserved. This also implies that analysis and visualization techniques developed for the ArchiMate language still apply when the specialized elements or relationships are used.\nSpecialization of concepts is done by using the profile mechanism described in Section 15.1. The name of the profile is the name of the specialization, and it may have other attributes if relevant to the specialization. The specialized concept is modeled by assigning such a profile to the generalized concept.\nThe profile may also define a specific notation to denote the specialization. The default is the guillemet notation of UML for stereotypes (“«specialization name»”). Other options include specific icons, colors, fonts, or symbols. Note that multiple specialization profiles may be assigned to the same generalized concept; in the default notation, these are shown as a comma- separated list (“«specialization 1, specialization 2»”)."@en ;
        rdfs:subClassOf  :CustomizationElement .

:Node   a                owl:Class ;
        rdfs:comment     "Nodes are active structure elements that perform technology behavior and execute, store, and process technology objects such as artifacts (or materials, as outlined in Chapter 11). For instance, nodes are used to model application platforms, defined by the TOGAF framework [4] as: “a collection of technology components of hardware and software that provide the services used to support applications”.\nNodes can be interconnected by paths. A node may be assigned to an artifact to model that the artifact is deployed on the node.\nThe name of a node should preferably be a noun. A node may consist of sub-nodes.\nArtifacts deployed on a node may either be drawn inside the node or connected to it with an assignment relationship."@en , "A node represents a computational or physical resource that hosts, manipulates, or interacts with other computational or physical resources."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :Accessor_Type1 , :InternalActiveStructureElement , :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 .

:Specialization_relation_from_dataObject
        a                   owl:ObjectProperty ;
        rdfs:domain         :Data_Object ;
        rdfs:range          :Grouping , :Data_Object ;
        rdfs:subPropertyOf  :SpecializationR .

:Architecture  a         owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Specialization_relation_from_location
        a                   owl:ObjectProperty ;
        rdfs:domain         :Location ;
        rdfs:range          :Location , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Serving  a              owl:Class ;
        rdfs:subClassOf  :DependencyRelationShip .

:Business_Event  a       owl:Class ;
        rdfs:comment     "Business processes and other business behavior may be triggered or interrupted by a business event. Also, business processes may raise events that trigger other business processes, functions, or interactions. Unlike business processes, functions, and interactions, a business event is instantaneous: it does not have duration. Events may originate from the environment of the organization (e.g., from a customer), but also internal events may occur generated by, for example, other processes within the organization.\nA business event may have a time attribute that denotes the moment or moments at which the event happens. For example, this can be used to model time schedules; e.g., to model an event that triggers a recurring business process to execute every first Monday of the month.\nA business event may trigger or be triggered (raised) by a business process, business function, or business interaction. A business event may access a business object and may be composed of other business events. The name of a business event should preferably be a verb in the perfect tense; e.g., claim received."@en , "A business event is a business behavior element that denotes an organizational state change. It may originate from and be resolved inside or outside the organization."@en ;
        rdfs:subClassOf  :Source_Type2 , :Influencer_Type2 , :Event , :BusinessElement , :Accessor_Type2 .

:CorrespondanceRule  a   owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:InfluenceR  a                  owl:ObjectProperty ;
        rdfs:subPropertyOf      :DependencyRelationShip ;
        owl:inverseOf           :Inverse_of_Influence ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForInfluence :TargetRelationshipForInfluence ) .

:Aggregated_by_capability
        a                   owl:ObjectProperty ;
        rdfs:domain         :Capability ;
        rdfs:range          :Grouping , :Capability ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_technologyInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Interaction ;
        rdfs:range          :Technology_Interaction , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_applicationFunctionOrProcessOrInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Process , :Application_Interaction , :Application_Function ;
        rdfs:range          :Grouping , :Application_Process , :Application_Interaction , :Application_Function ;
        rdfs:subPropertyOf  :AggregationR .

:MotivationElement  a    owl:Class ;
        rdfs:comment     "The motivation of an organization or individual to achieve certain results is represented by goals, principles, requirements, and constraints. Goals represent that a stakeholder wants to realize a certain outcome; e.g., “Increase customer satisfaction by 10%”. The end results realized by capabilities that realize these goals are outcomes. Principles and requirements represent desired properties of solutions – or means – to realize the goals. Principles are normative guidelines that guide the design of all possible solutions in a given context. For example, the principle “Data should be stored only once” represents a means to achieve the goal of “Data consistency” and applies to all possible designs of the organization’s architecture. Requirements represent formal statements of need, expressed by stakeholders, which must be met by the architecture or solutions. For example, the requirement “Use a single CRM system” conforms to the aforementioned principle by applying it to the current organization’s architecture in the context of the management of customer data."@en , "Motivation elements are used to model the motivations, or reasons, that guide the design or change of an Enterprise Architecture.\nIt is essential to understand the factors, often referred to as drivers, which influence other motivation elements. They can originate from either inside or outside the enterprise. Internal drivers, also called concerns, are associated with stakeholders, which can be some individual human being or some group of human beings, such as a project team, enterprise, or society. Examples of such internal drivers are customer satisfaction, compliance to legislation, or profitability. It is common for enterprises to undertake an assessment of these drivers; e.g., using a SWOT analysis, in order to respond in the best way."@en , "Different stakeholders may attach a different value to outcomes, since they may have different interests. Similarly, they may give their own meaning or interpretation to core elements of the architecture."@en , "A motivation element is an element that provides the context of or reason behind the architecture of an enterprise."@en ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:Specialization_relation_from_product
        a                   owl:ObjectProperty ;
        rdfs:domain         :Product ;
        rdfs:range          :Product , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Access_relation_from_course_of_action
        a                   owl:ObjectProperty ;
        rdfs:domain         :Course_of_Action ;
        rdfs:range          :Junction ;
        rdfs:subPropertyOf  :AccessR .

:Aggregated_by_grouping
        a                   owl:ObjectProperty ;
        rdfs:domain         :Grouping ;
        rdfs:range          :ArchiMateModelingRelation , :ArchiMateModelingEntity ;
        rdfs:subPropertyOf  :AggregationR .

:Business_Process  a     owl:Class ;
        rdfs:comment     "A business process represents a sequence of business behaviors that achieves a specific outcome such as a defined set of products or business services."@en , "A business process describes the internal behavior performed by a business role that is required to produce a set of products and services. For a consumer, the products and services are relevant and the required behavior is merely a black box, hence the designation “internal”.\nA complex business process may be an aggregation of other, finer-grained processes. To each of these, finer-grained roles may be assigned.\nThere is a potential many-to-many relationship between business processes and business functions. Informally speaking, processes describe some kind of “flow” of activities, whereas functions group activities according to required skills, knowledge, resources, etc.\nA business process may be triggered by, or trigger, any other business behavior element (e.g., business event, business process, business function, or business interaction). A business process may access business objects. A business process may realize one or more business services and may use (internal) business services or application services. A business role may be assigned to a business process to perform this process manually. An automated business process can be realized by an application process. The name of a business process should clearly indicate a predefined sequence of actions, and may include the word “process”. Examples are “adjudicate claim”, “employee on-boarding”, “approval process”, or “financial reporting”.\nIn an ArchiMate model, the existence of business processes is depicted. High-level business, end-to-end processes, macro flows, and workflows can all be expressed with the same business process element in the ArchiMate language. It does not, however, list the flow of activities in detail. This is typically done during business process modeling, where a business process can be expanded using a business process design language; e.g., BPMN"@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Process , :Influencer_Type1 , :BusinessElement , :Accessor_Type1 .

:Specialization_relation_from_communicationNetwork
        a                   owl:ObjectProperty ;
        rdfs:domain         :Communication_Network ;
        rdfs:range          :Grouping , :Communication_Network ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForAssignment
        a                   owl:ObjectProperty ;
        rdfs:domain         :Assignment ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForAssignment .

:Aggregated_by_businessService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Service ;
        rdfs:range          :Grouping , :Business_Service ;
        rdfs:subPropertyOf  :AggregationR .

:Accessor_Type2  a  owl:Class .

:aggregation_001  a  :Aggregation , owl:NamedIndividual .

:StrategyElement  a      owl:Class ;
        rdfs:subClassOf  :Realization_Type1 , :ArchiMateModelingEntity .

:Purpose  a              owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Aggregated_by_stakeholder
        a                   owl:ObjectProperty ;
        rdfs:domain         :Stakeholder ;
        rdfs:range          :Stakeholder , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Flow_relation_from_source_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Source_Type2 ;
        rdfs:range          :Technology_Collaboration , :Path , :Facility , :Business_Interface , :Technology_Interface , :Application_Interface , :Business_Function , :Application_Interaction , :Technology_Process , :Communication_Network , :Application_Process , :Business_Collaboration , :Device , :Application_Collaboration , :Application_Service , :Node , :Technology_Service , :System_Software , :Product , :Distribution_Network , :Technology_Function , :Business_Service , :Business_Actor , :Business_Role , :Grouping , :Equipment , :Business_Process , :Business_Interaction , :Location , :Junction , :Application_Function , :Application_Component , :Technology_Interaction , :Business_Event ;
        rdfs:subPropertyOf  :FlowR .

:Serving_relation_from_courseOfAction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Course_of_Action ;
        rdfs:range          :Junction , :Grouping , :Course_of_Action ;
        rdfs:subPropertyOf  :ServingR .

:Specialization_relation_from_applicationEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Event ;
        rdfs:range          :Grouping , :Application_Event ;
        rdfs:subPropertyOf  :SpecializationR .

:AssignmentR  a                 owl:ObjectProperty ;
        rdfs:subPropertyOf      :StructuralRelationship ;
        owl:inverseOf           :Inverse_of_assignment ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForAssignment :TargetRelationshipForAssignment ) ;
        owl:propertyChainAxiom  ( :CompositionR :AssignmentR ) ;
        owl:propertyChainAxiom  ( :AssignmentR :CompositionR ) ;
        owl:propertyChainAxiom  ( :AssignmentR :AssignmentR ) ;
        owl:propertyChainAxiom  ( :AssignmentR :AggregationR ) ;
        owl:propertyChainAxiom  ( :AggregationR :AssignmentR ) .

:Technology_Object  a    owl:Class ;
        rdfs:comment     "Technology objects represent the “physical” objects manipulated by the infrastructure of an enterprise. Technology objects are abstract elements; i.e., they are not instantiated in models but serve as the generic type of the things manipulated by the Technology Layer. This may include both artifacts (e.g., files) and physical material.\nTechnology objects may be accessed by technology behavior (functions, processes, interactions, events, and services). A technology object may have association, specialization, aggregation, or composition relationships with other technology objects. A technology object may realize a data object or business object. It may be realized by an artifact or material (from the physical elements). The name of a technology object should preferably be a noun."@en , "A technology object represents a passive element that is used or produced by technology behavior."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :PassiveStructureElement .

:RealizationR  a                owl:ObjectProperty ;
        rdfs:subPropertyOf      :StructuralRelationship ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForRealization :TargetRelationshipForRealization ) .

:Technology_Interaction
        a                owl:Class ;
        rdfs:comment     "A technology interaction describes the collective behavior that is performed by the nodes that participate in a technology collaboration. This may, for example, include the communication pattern between these components. A technology interaction can also specify the externally visible behavior needed to realize a technology service. The details of the interaction between the nodes involved in a technology interaction can be expressed during the detailed design using, for example, a UML interaction diagram.\nA technology collaboration may be assigned to a technology interaction. A technology interaction may realize a technology service. Technology services may serve a technology interaction. A technology interaction may access artifacts. The name of a technology interaction should clearly identify a series of technology behaviors; e.g., “Client profile creation” or “Update customer records”."@en , "A technology interaction represents a unit of collective technology behavior performed by (a collaboration of) two or more nodes."@en ;
        rdfs:subClassOf  :Influencer_Type1 , :Triggering_Type1 , :Serving_Type1 , :Interaction , :TechnologyPhysicalElement , :Accessor_Type1 , :Source_Type2 .

:Aggregated_by_assessment
        a                   owl:ObjectProperty ;
        rdfs:domain         :Assessment ;
        rdfs:range          :Grouping , :Assessment ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_driver
        a                   owl:ObjectProperty ;
        rdfs:domain         :Driver ;
        rdfs:range          :Grouping , :Driver ;
        rdfs:subPropertyOf  :SpecializationR .

:InternalBehaviorElement
        a                owl:Class ;
        rdfs:comment     "An internal behavior element represents a unit of activity performed by one or more active structure elements."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :BehaviourElement .

:CustomizationElement
        a             owl:Class ;
        rdfs:comment  "Every specific purpose and usage of an architecture modeling language brings about its own specific demands on the language. Yet, it should be possible to use a language for only a limited, though non-specific, modeling purpose. Therefore, the ArchiMate language, specified in the ArchiMate metamodel and described in Chapter 4 to Chapter 10, contains only the basic elements and relationships that serve general Enterprise Architecture modeling purposes. However, the language should also be able to facilitate, through customization3 mechanisms, specialized, or domain-specific purposes, such as:\n􏰀 Support for specific types of model analysis\n􏰀 Support the communication of architectures\n􏰀 Capture the specifics of a certain application domain (e.g., the financial sector)\nThe argument behind this statement is to provide a means to allow customization of the language that is tailored towards such specific domains or applications, without burdening the language with a lot of additional concepts and notations which most people would barely use. The remainder of this chapter is devoted to the customization mechanisms that are part of the ArchiMate language, and to a series of illustrative examples of such customizations.\nAs stated earlier in this standard, the ArchiMate language contains only the elements and relationships that are necessary for general architecture modeling. However, users might want to be able to, for example, perform model-based performance or cost calculations, or to attach supplementary information (textual, numerical, etc.) to the model elements and relationships. A simple way to enrich ArchiMate elements and relationships in a generic way is to add supplementary information by means of a “profiling” specialization mechanism (see also [9])."@en .

:ImplementationMigrationElement
        a                owl:Class ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:Specialization_relation_from_businessInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Interaction ;
        rdfs:range          :Grouping , :Business_Interaction ;
        rdfs:subPropertyOf  :SpecializationR .

:Triggering_Type1  a  owl:Class .

:Inverse_of_assignment
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :StructuralRelationship .

:Driver  a               owl:Class ;
        rdfs:comment     "Drivers may be internal, in which case they are usually associated with a stakeholder, and are often called “concerns”. Stakeholder concerns are defined in the TOGAF framework [4] as ”the key interests that are crucially important to the stakeholders in a system, and determine the acceptability of the system. Concerns may pertain to any aspect of the function, development, or operation of the system, including considerations such as performance, reliability, security, distribution, and evolvability.” Examples of internal drivers are Customer satisfaction and Profitability. Drivers of change may also be external; e.g., economic changes or changing legislation. The name of a driver should preferably be a noun."@en , "A driver represents an external or internal condition that motivates an organization to define its goals and implement the changes necessary to achieve them."@en ;
        rdfs:subClassOf  :MotivationElement , :Influencer_Type2 .

:ServingR  a                    owl:ObjectProperty ;
        rdfs:subPropertyOf      :DependencyRelationShip ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForServing :TargetRelationshipForServing ) .

:Aggregated_by_businessObjectorContract
        a                   owl:ObjectProperty ;
        rdfs:domain         :Contract , :Business_Object ;
        rdfs:range          :Grouping , :Contract , :Business_Object ;
        rdfs:subPropertyOf  :AggregationR .

:Function  a             owl:Class ;
        rdfs:comment     "A function represents a collection of behavior based on specific criteria, such as required resources, competences, or location."@en ;
        rdfs:subClassOf  :BehaviourElement .

:Access_relation_from_accessor_type3
        a                   owl:ObjectProperty ;
        rdfs:domain         :Accessor_Type3 ;
        rdfs:range          :Junction , :Grouping , :Deliverable ;
        rdfs:subPropertyOf  :AccessR .

:TechnologyPhysicalElement
        a                owl:Class ;
        rdfs:comment     "The Technology Layer is typically used to model the technology architecture of the enterprise, defined by the TOGAF framework [4] as: “the structure and interaction of the platform services, and logical and physical technology components”."@en ;
        rdfs:subClassOf  :Realization_Type1 , :ArchiMateModelingEntity .

:Aggregated_by_businessInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Interface ;
        rdfs:range          :Grouping , :Business_Interface ;
        rdfs:subPropertyOf  :AggregationR .

:ArchitectureModel  a    owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:inverse_of_TargetRelationshipForTriggering
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:DependencyRelationShip
        a                owl:Class , owl:ObjectProperty ;
        rdfs:comment     "Dependency relationships, which model how elements are used to support other elements"^^rdfs:Literal ;
        rdfs:subClassOf  :ArchiMateModelingRelation .

:Influence  a            owl:Class ;
        rdfs:subClassOf  :DependencyRelationShip .

:Specialization_relation_from_businessObjectOrContract
        a                   owl:ObjectProperty ;
        rdfs:domain         :Contract , :Business_Object ;
        rdfs:range          :Grouping , :Contract , :Business_Object ;
        rdfs:subPropertyOf  :SpecializationR .

:Source_Type1  a  owl:Class .

:Realization_relation_from_product
        a                   owl:ObjectProperty ;
        rdfs:domain         :Product ;
        rdfs:range          :Technology_Service , :Technology_Interface , :Device , :Business_Service , :Business_Interface , :Technology_Event , :System_Software , :Business_Process , :Junction , :Stakeholder , :Application_Event , :Facility , :Technology_Collaboration , :Goal , :Business_Function , :Technology_Function , :Application_Interaction , :Technology_Process , :Requirement , :Business_Role , :Business_Interaction , :Business_Event , :Application_Interface , :Outcome , :Capability , :Business_Actor , :Application_Process , :Principle , :Application_Component , :Application_Collaboration , :Grouping , :Application_Function , :Technology_Interaction , :Constraint ;
        rdfs:subPropertyOf  :RealizationR .

:Triggering_relation_from_triggering_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering_Type1 ;
        rdfs:range          :Triggering_Type1 ;
        rdfs:subPropertyOf  :TriggeringR .

:Specialization_relation_from_applicationInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Interaction ;
        rdfs:range          :Grouping , :Application_Interaction ;
        rdfs:subPropertyOf  :SpecializationR .

:aggregation_007  a  :Aggregation , owl:NamedIndividual .

:Business_Service  a     owl:Class ;
        rdfs:comment     "A business service represents an explicitly defined exposed business behavior."@en , "A business service exposes the functionality of business roles or collaborations to their environment. This functionality is accessed through one or more business interfaces.\nA business service should provide a unit of behavior that is meaningful from the point of view of the environment. It has a purpose, which states this utility. The environment includes the (behavior of) users from outside as well as inside the organization. Business services can be external, customer-facing services (e.g., a travel insurance service) or internal support services (e.g., a resource management service).\nA business service is associated with a value. A business service may serve a business process, business function, or business interaction. A business process, business function, or business interaction may realize a business service. A business interface may be assigned to a business service. A business service may access business objects. The name of a business service should preferably be a verb ending with “ing”; e.g., transaction processing. Also, a name explicitly containing the word “service” may be used."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalBehaviorElement , :BusinessElement , :Accessor_Type1 .

[ a            owl:AllDisjointClasses ;
  owl:members  ( :ActiveStructureElement :BehaviourElement :PassiveStructureElement )
] .

:Outcome  a              owl:Class ;
        rdfs:comment     "Outcomes are high-level, business-oriented results produced by capabilities of an organization, and by inference by the core elements of its architecture that realize these capabilities. Outcomes are tangible, possibly quantitative, and time-related, and can be associated with assessments. An outcome may have a different value for different stakeholders.\nThe notion of outcome is important in business outcome-driven approaches to Enterprise Architecture and in capability-based planning. Outcomes are closely related to requirements, goals, and other intentions. Outcomes are the end results, and goals or requirements are often formulated in terms of outcomes that should be realized. Capabilities are designed to achieve such outcomes.\nOutcome names should unambiguously identify end results that have been achieved in order to avoid confusion with actions or goals. At a minimum, outcome names should consist of a noun identifying the end result followed by a past-tense verb or adjective indicating that the result has been achieved. Examples include “First-place ranking achieved” and “Key supplier partnerships in place”. Outcome names can also be more specific; e.g., “2015 quarterly profits rose 10% year over year beginning in Q3”."@en , "An outcome represents an end result that has been achieved."@en ;
        rdfs:subClassOf  :MotivationElement , :Influencer_Type2 .

:Strategy  a             owl:Class ;
        rdfs:subClassOf  :Course_of_Action .

:Application_Interface
        a                owl:Class ;
        rdfs:comment     "An application interface specifies how the functionality of a component can be accessed by other elements. An application interface exposes application services to the environment. The same application service may be exposed through different interfaces, and the same interface may expose multiple services.\nIn a sense, an application interface specifies a kind of contract that a component exposing this interface must fulfill. This may include parameters, protocols used, pre- and post-conditions, and data formats.\nAn application interface may be part of an application component through composition, which means that these interfaces are provided by that component, and can serve other application components. An application interface can be assigned to application services, which means that the interface exposes these services to the environment. The name of an application interface should preferably be a noun."@en , "An application interface represents a point of access where application services are made available to a user, another application component, or a node."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalActiveStructureElement , :ApplicationElement , :Accessor_Type1 .

:Application_Event  a    owl:Class ;
        rdfs:comment     "Application functions and other application behavior may be triggered or interrupted by an application event. Also, application behavior may raise events that trigger other application behavior. Unlike processes, functions, and interactions, an event is instantaneous; it does not have duration. Events may originate from the environment of the organization (e.g., from an external application), but also internal events may occur generated by, for example, other applications within the organization.\nAn application event may have a time attribute that denotes the moment or moments at which the event happens. For example, this can be used to model time schedules; e.g., an event that triggers a daily batch process.\nAn application event may trigger or be triggered (raised) by an application function, process, or interaction. An application event may access a data object and may be composed of other application events. The name of an application event should preferably be a verb in the perfect tense; e.g., “claim received”."@en , "An application event is an application behavior element that denotes a state change."@en ;
        rdfs:subClassOf  :Influencer_Type2 , :ApplicationElement , :Accessor_Type2 .

:Aggregated_by_applicationInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Grouping , :Application_Interface ;
        rdfs:subPropertyOf  :AggregationR .

:Aggregated_by_distributionNetwork
        a                   owl:ObjectProperty ;
        rdfs:domain         :Distribution_Network ;
        rdfs:range          :Distribution_Network , :Node , :Equipment , :System_Software , :Device , :Grouping , :Technology_Collaboration , :Facility , :Technology_Interface ;
        rdfs:subPropertyOf  :AggregationR .

:TargetRelationshipForAccess
        a                   owl:ObjectProperty ;
        rdfs:domain         :Access ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForAccess .

:TriggeringR  a                 owl:TransitiveProperty , owl:ObjectProperty ;
        rdfs:domain             :Triggering_Type2 ;
        rdfs:range              :Work_Package , :Plateau , :Implementation_Event ;
        rdfs:subPropertyOf      :DynamicRelationship ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForTriggering :TargetRelationshipForTriggering ) .

:Derivation_Rule  a      owl:Class ;
        rdfs:subClassOf  :ArchiMateRule .

:inverse_of_SourceRelationshipForAggregation
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Aggregated_by_principle
        a                   owl:ObjectProperty ;
        rdfs:domain         :Principle ;
        rdfs:range          :Principle , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_technologyInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Interface ;
        rdfs:range          :Technology_Interface , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForAssociation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Association ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForAssociation .

:Process  a              owl:Class ;
        rdfs:comment     "A process represents a sequence of behaviors that achieves a specific outcome."@en ;
        rdfs:subClassOf  :InternalBehaviorElement .

:SourceRelationship  a      owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceTargetRelationship .

:Accessor_Type3  a  owl:Class .

:Influencer_Type1  a  owl:Class .

:aggregation_002  a  :Aggregation , owl:NamedIndividual .

:Flow_relation_from_source_type3
        a                   owl:ObjectProperty ;
        rdfs:domain         :Source_Type3 ;
        rdfs:range          :Work_Package , :Junction , :Implementation_Event , :Grouping ;
        rdfs:subPropertyOf  :FlowR .

:Assignment_relation_from_resource
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource ;
        rdfs:range          :Junction , :Grouping ;
        rdfs:subPropertyOf  :AssignmentR .

:Realization_Type1  a  owl:Class .

:TargetRelationshipForComposition
        a                   owl:ObjectProperty ;
        rdfs:domain         :Composition ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForComposition .

:Artifact  a             owl:Class ;
        rdfs:comment     "An artifact represents a tangible element in the IT world. Artifact is a specialization of technology object. It is typically used to model (software) products such as source files, executables, scripts, database tables, messages, documents, specifications, and model files. An instance (copy) of an artifact can be deployed on a node. An artifact could be used to represent a physical data component that realizes a data object.\nAn application component or system software may be realized by one or more artifacts. A data object may be realized by one or more artifacts. A node may be assigned to an artifact to model that the artifact is deployed on the node. Thus, the two typical ways to use the artifact element are as an execution component or as a data file. In fact, these could be defined as specializations of the artifact element.\nThe name of an artifact should preferably be the name of the file it represents; e.g., “order.jar”. An artifact may consist of sub-artifacts."@en , "An artifact represents a piece of data that is used or produced in a software development process, or by deployment and operation of an IT system."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Serving_Type1 , :PassiveStructureElement , :Influencer_Type1 , :Accessor_Type1 .

:Aggregated_by_workPackage
        a                   owl:ObjectProperty ;
        rdfs:domain         :Work_Package , :Grouping ;
        rdfs:range          :Work_Package ;
        rdfs:subPropertyOf  :AggregationR .

:Aspect  a               owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Aggregated_by_deliverable
        a                   owl:ObjectProperty ;
        rdfs:domain         :Deliverable ;
        rdfs:range          :Grouping , :Deliverable ;
        rdfs:subPropertyOf  :AggregationR .

:inverse_of_TargetRelationshipForAssignment
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Specialization_relation_from_applicationCollaboration
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Collaboration ;
        rdfs:range          :Grouping , :Application_Collaboration ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForSpecialization
        a                   owl:ObjectProperty ;
        rdfs:domain         :Specialization ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForSpecialization .

:inverse_of_TargetRelationshipForRealization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:inverse_of_TargetRelationshipForInfluence
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Access_relation_from_capability
        a                   owl:ObjectProperty ;
        rdfs:domain         :Capability ;
        rdfs:range          :Junction ;
        rdfs:subPropertyOf  :AccessR .

:Triggering_Type2  a  owl:Class .

:AccessR  a                     owl:ObjectProperty ;
        rdfs:subPropertyOf      :DependencyRelationShip ;
        owl:inverseOf           :inverse_of_access ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForAccess :TargetRelationshipForAccess ) .

:Facility  a             owl:Class ;
        rdfs:comment     "A facility is a specialization of a node. It represents a physical resource that has the capability of facilitating (e.g., housing or locating) the use of equipment. It is typically used to model factories, buildings, or outdoor constructions that have an important role in production or distribution processes. Examples of facilities include a factory, a laboratory, a warehouse, a shopping mall, a cave, or a spaceship. Facilities may be composite; i.e., consist of sub-facilities.\nFacilities can be interconnected by distribution networks. A facility can serve other facilities, and also other active structure elements such as business roles and actors. A facility can be composed of other facilities and can be aggregated in a location.\nThe name of a facility should preferably be a noun referring to the type of facility; e.g., “Rotterdam harbor oil refinery”."@en , "A facility represents a physical structure or environment."@en ;
        rdfs:subClassOf  :Serving_Type1 , :Node , :TechnologyPhysicalElement , :Source_Type2 , :Influencer_Type1 , :Accessor_Type1 , :Triggering_Type1 .

:Aggregated_by_applicationComponent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Component ;
        rdfs:range          :Grouping , :Application_Interface , :Application_Component , :Application_Collaboration ;
        rdfs:subPropertyOf  :AggregationR .

:accessLink001  a                     :Access , owl:NamedIndividual ;
        :SourceRelationshipForAccess  :aggregation_001 ;
        :TargetRelationshipForAccess  :aggregation_001 .

_:b1    a                   owl:Restriction ;
        owl:onProperty      :TargetRelationshipForAccess ;
        owl:someValuesFrom  :Location .

:Specialization_relation_from_principle
        a                   owl:ObjectProperty ;
        rdfs:domain         :Principle ;
        rdfs:range          :Principle , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:DynamicRelationship  a  owl:Class , owl:ObjectProperty ;
        rdfs:comment     "Dynamic relationships, which are used to model behavioral dependencies between\nelements"^^rdfs:Literal ;
        rdfs:subClassOf  :ArchiMateModelingRelation .

:CompositeElement  a     owl:Class ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:Contract  a             owl:Class ;
        rdfs:comment     "The contract element may be used to model a contract in the legal sense, but also a more informal agreement associated with a product. It may also be or include a Service-Level Agreement (SLA), describing an agreement about the functionality and quality of the services that are part of a product. A contract is a specialization of a business object.\nThe relationships that apply to a business object also apply to a contract. In addition, a contract may have an aggregation relationship with a product. The name of a contract is preferably a noun."@en , "A contract represents a formal or informal specification of an agreement between a provider and a consumer that specifies the rights and obligations associated with a product and establishes functional and non-functional parameters for interaction."@en ;
        rdfs:subClassOf  :Influencer_Type2 , :Business_Object , :BusinessElement .

:Technology_Collaboration
        a                owl:Class ;
        rdfs:comment     "A technology collaboration specifies which nodes cooperate to perform some task. The collaborative behavior, including, for example, the communication pattern of these nodes, is modeled by a technology interaction. A technology collaboration typically models a logical or temporary collaboration of nodes, and does not exist as a separate entity in the enterprise.Technology collaboration is a specialization of node, and aggregates two or more (cooperating) nodes. A technology collaboration is an active structure element that may be assigned to one or more technology interactions or other technology internal behavior elements, which model the associated behavior. A technology interface may serve a technology collaboration, and a technology collaboration may be composed of technology interfaces. The name of a technology collaboration should preferably be a noun."@en , "A technology collaboration represents an aggregate of two or more nodes that work together to perform collective technology behavior."@en ;
        rdfs:subClassOf  :Serving_Type1 , :TechnologyPhysicalElement , :Triggering_Type1 , :Influencer_Type1 , :Collaboration , :Source_Type2 , :Accessor_Type1 .

:Inverse_of_aggregation
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :StructuralRelationship .

:Aggregated_by_applicationEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Grouping , :Application_Event ;
        rdfs:subPropertyOf  :AggregationR .

:TargetRelationship  a      owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceTargetRelationship .

:Specialization_relation_from_artifact
        a                   owl:ObjectProperty ;
        rdfs:domain         :Artifact ;
        rdfs:range          :Grouping , :Artifact ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_businessActor
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Actor ;
        rdfs:range          :Grouping , :Business_Interface , :Business_Actor ;
        rdfs:subPropertyOf  :AggregationR .

:inverse_of_SourceRelationshipForComposition
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Application_Process  a  owl:Class ;
        rdfs:comment     "An application process describes the internal behavior performed by an application component that is required to realize a set of services. For a (human or automated) consumer the services are relevant and the required behavior is merely a black box, hence the designation “internal”.\nAn application process may realize application services. Other application services may serve (be used by) an application process. An application process may access data objects. An application component may be assigned to an application process (which means that this component performs the process). The name of an application process should clearly identify a series of application behaviors; e.g., “Claims adjudication process”, or “General ledger update job”."@en , "An application process represents a sequence of application behaviors that achieves a specific outcome."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Triggering_Type1 , :ApplicationElement , :Accessor_Type1 , :Process , :Influencer_Type1 .

:inverse_of_SourceRelationshipForInfluence
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Source_Type2  a  owl:Class .

:Triggering_relation_from_triggering_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering_Type2 ;
        rdfs:range          :Triggering_Type2 ;
        rdfs:subPropertyOf  :TriggeringR .

:Stakeholder  a          owl:Class ;
        rdfs:comment     "This definition is based on the definition in the TOGAF framework [4]. A stakeholder has one or more interests in, or concerns about, the organization and its Enterprise Architecture. In order to direct efforts to these interests and concerns, stakeholders change, set, and emphasize goals. Stakeholders may also influence each other. Examples of stakeholders are the CEO, the board of directors, shareholders, customers, business and application architects, but also legislative authorities. The name of a stakeholder should preferably be a noun."@en , "A stakeholder is the role of an individual, team, or organization (or classes thereof) that represents their interests in the outcome of the architecture."@en ;
        rdfs:subClassOf  :ViewpointElement , :MotivationElement , :ActiveStructureElement .

:Flow   a                owl:Class ;
        rdfs:subClassOf  :DynamicRelationship .

:Aggregated_by_resource
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource ;
        rdfs:range          :Resource , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_applicationInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Interface ;
        rdfs:range          :Grouping , :Application_Interface ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_facility
        a                   owl:ObjectProperty ;
        rdfs:domain         :Facility ;
        rdfs:range          :Grouping , :Facility ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_implementationEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Implementation_Event ;
        rdfs:range          :Implementation_Event , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Work_Package  a         owl:Class ;
        rdfs:comment     "The central behavioral element is a work package. A work package is a behavior element that has a clearly defined start and end date, and realizes a well-defined set of goals or deliverables. The work package element can be used to model sub-projects or tasks within a project, complete projects, programs, or project portfolios.\nThe central behavioral element is a work package. A work package is a behavior element that has a clearly defined start and end date, and realizes a well-defined set of goals or deliverables. The work package element can be used to model sub-projects or tasks within a project, complete projects, programs, or project portfolios.\nConceptually, a work package is similar to a business process, in that it consists of a set of causally-related tasks, aimed at producing a well-defined result. However, a work package is a unique, “one-off” process. Still, a work package can be described in a way very similar to the description of a process."@en , "A work package represents a series of actions identified and designed to achieve specific results within specified time and resource constraints."@en ;
        rdfs:subClassOf  :Triggering_Type2 , :Source_Type3 , :Realization_Type1 , :Influencer_Type2 , :ImplementationMigrationElement , :Accessor_Type3 .

:Aggregated_by_technologyEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Event ;
        rdfs:range          :Technology_Event , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:aggregation_008  a  :Aggregation , owl:NamedIndividual .

:Influence_relation_from_Stakeholder
        a                   owl:ObjectProperty ;
        rdfs:domain         :Stakeholder ;
        rdfs:range          :Value , :Stakeholder , :Grouping ;
        rdfs:subPropertyOf  :InfluenceR .

:inverse_of_SourceRelationshipForAccess
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Aggregated_by_nodeOrDeviceOrSystemSoftwareOrTechnologyCollaborationOrEquipmentOrFacility
        a                   owl:ObjectProperty ;
        rdfs:domain         :Facility , :Node , :Technology_Collaboration , :Equipment , :System_Software , :Device ;
        rdfs:range          :Device , :Equipment , :Technology_Collaboration , :Grouping , :Node , :Facility , :System_Software ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_equipment
        a                   owl:ObjectProperty ;
        rdfs:domain         :Equipment ;
        rdfs:range          :Grouping , :Equipment ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_businessEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Event ;
        rdfs:range          :Grouping , :Business_Event ;
        rdfs:subPropertyOf  :AggregationR .

:Aggregated_by_value  a     owl:ObjectProperty ;
        rdfs:domain         :Value ;
        rdfs:range          :Value , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:ArchiMateModelingEntity
        a       owl:Class .

:Grouping  a             owl:Class ;
        rdfs:comment     "One useful way of employing grouping is for modeling Architecture and Solution Building\nBlocks (ABBs and SBBs), as described in the TOGAF framework [4].\nAnother useful application of grouping is for modeling domains. For example, the TOGAF framework Glossary of Supplementary Definition (Section A.40) defines Information Domain as: “grouping of information (or data entities) by a set of criteria such as security classification, ownership, location, etc. In the context of security, Information Domains are defined as a set of users, their information objects, and a security policy”."@en , "The grouping element aggregates or composes concepts that belong together based on some common characteristic."@en ;
        rdfs:subClassOf  :OtherElements , :Accessor_Type1 , :Influencer_Type1 , :Source_Type3 , :Triggering_Type1 , :Triggering_Type4 , :CompositeElement , :Source_Type2 , :Triggering_Type3 , :Source_Type1 , :Triggering_Type2 .

:Value  a                owl:Class ;
        rdfs:comment     "Value represents the relative worth, utility, or importance of a core element or an outcome."@en , "Value may apply to what a party gets by selling or making available some product or service, or it may apply to what a party gets by buying or obtaining access to it. Value is often expressed in terms of money, but it has long since been recognized that non-monetary value is also essential to business; for example, practical/functional value (including the right to use a service), and the value of information or knowledge. Though value can hold internally for some system or organizational unit, it is most typically applied to external appreciation of goods, services, information, knowledge, or money, normally as part of some sort of customer-provider relationship.\nA value can be associated with all core elements of an architecture as well as with outcomes. To model the stakeholder for whom this value applies, this stakeholder can also be associated with that value. Although the name of a value can be expressed in many different ways (including amounts, objects), where the “functional” value of an architecture element is concerned it is recommended to try and express it as an action or state that can be performed or reached as a result of the corresponding element being available."@en , "Example\nSending push notifications has a value of Cost Efficiency for the stakeholder Insurer, and a value of Being Informed and Peace of Mind (which is partly due to a value of Certainty) for the stakeholder Customer. Different meanings can be assigned to the different specific types of notification messages. A Confirmation Of Receipt Message has the meaning Claim Has Been Received, a Review Complete Message has the meaning Claim Review Complete, and a Payment Complete Message has the meaning Claim Has Been Paid."@en ;
        rdfs:subClassOf  :PassiveStructureElement , :MotivationElement , :Influencer_Type2 .

:Serving_relation_from_serving_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Serving_Type1 ;
        rdfs:range          :Node , :Technology_Interaction , :Technology_Collaboration , :Application_Component , :Application_Process , :System_Software , :Business_Role , :Junction , :Business_Interaction , :Business_Service , :Application_Collaboration , :Equipment , :Grouping , :Application_Service , :Facility , :Application_Interaction , :Business_Event , :Technology_Function , :Application_Function , :Business_Process , :Technology_Process , :Business_Collaboration , :Business_Interface , :Business_Function , :Device , :Technology_Event , :Technology_Interface , :Technology_Service , :Application_Interface , :Business_Actor , :Application_Event ;
        rdfs:subPropertyOf  :ServingR .

:ArchiMateRule  a  owl:Class .

:AndJunction  a          owl:Class ;
        rdfs:subClassOf  :Junction .

:inverse_of_SourceRelationshipForFlow
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:Specialization  a       owl:Class ;
        rdfs:subClassOf  :OtherRelationship .

:Influence_relation_from_influencer_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Influencer_Type1 ;
        rdfs:range          :Grouping , :Stakeholder , :Principle , :Requirement , :Outcome , :Value , :Constraint , :Meaning , :Goal , :Junction , :Driver , :Assessment ;
        rdfs:subPropertyOf  :InfluenceR .

:Inverse_of_composition
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :StructuralRelationship .

:ArchitectureViewpoint
        a                owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Course_of_Action  a     owl:Class ;
        rdfs:comment     "A course of action represents what an enterprise has decided to do. Courses of action can be categorized as strategies and tactics. It is not possible to make a hard distinction between the two, but strategies tend to be long-term and fairly broad in scope, while tactics tend to be shorter-term and narrower in scope."@en , "A course of action is an approach or plan for configuring some capabilities and resources of the enterprise, undertaken to achieve a goal."@en ;
        rdfs:subClassOf  :Triggering_Type4 , :StrategyElement , :Source_Type1 , :Influencer_Type2 , :BehaviourElement .

:TargetRelationshipForAggregation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Aggregation ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForAggregation .

:Inverse_of_serving  a      owl:ObjectProperty ;
        rdfs:subPropertyOf  :DependencyRelationShip ;
        owl:inverseOf       :ServingR .

:PhysicalElement  a      owl:Class ;
        rdfs:subClassOf  :TechnologyPhysicalElement .

:Specialization_relation_from_device
        a                   owl:ObjectProperty ;
        rdfs:domain         :Device ;
        rdfs:range          :Grouping , :Device ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_outcome
        a                   owl:ObjectProperty ;
        rdfs:domain         :Outcome ;
        rdfs:range          :Outcome , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Resource  a             owl:Class ;
        rdfs:comment     "Resources are a central concept in the field of strategic management, economics, computer science, portfolio management, and more. They are often considered, together with capabilities, to be sources of competitive advantage for organizations. Resources are analyzed in terms of strengths and weaknesses, and they are considered when implementing strategies. Due to resources being limited, they can often be a deciding factor for choosing which strategy, goal, and project to implement and in which order. Resources can be classified into tangible assets – financial assets (e.g., cash, securities, borrowing capacity), physical assets (e.g., plant, equipment, land, mineral reserves), intangible assets (technology; e.g., patents, copyrights, trade secrets; reputation; e.g., brand, relationships; culture), and human assets (skills/know-how, capacity for communication and collaboration, motivation).\nResources are realized by active and passive structure elements. The name of a resource should preferably be a noun."@en , "A resource represents an asset owned or controlled by an individual or organization."@en ;
        rdfs:subClassOf  :Triggering_Type3 , :StructureElement , :StrategyElement , :Source_Type1 , :Influencer_Type2 .

:BusinessElement  a      owl:Class ;
        rdfs:subClassOf  :Realization_Type1 , :ArchiMateModelingEntity .

:Aggregated_by_technologyService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Service ;
        rdfs:range          :Technology_Service , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Correspondance  a       owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:SourceRelationshipForFlow
        a                   owl:ObjectProperty ;
        rdfs:domain         :Flow ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForFlow .

:Specialization_relation_from_businessProcess
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Process ;
        rdfs:range          :Grouping , :Business_Process ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_grouping
        a                   owl:ObjectProperty ;
        rdfs:domain         :Grouping ;
        rdfs:range          :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Influencer_Type2  a  owl:Class .

:aggregation_003  a  :Aggregation , owl:NamedIndividual .

:Aggregated_by_dataObject
        a                   owl:ObjectProperty ;
        rdfs:domain         :Data_Object ;
        rdfs:range          :Grouping , :Data_Object ;
        rdfs:subPropertyOf  :AggregationR .

:ArchitectureView  a     owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:TargetRelationshipForTriggering
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForTriggering .

:ExternalBehaviorElement
        a                owl:Class ;
        rdfs:comment     "Thus, a service is the externally visible behavior of the providing system, from the perspective of systems that use that service; the environment consists of everything outside this providing system. The value offered to the user of the service provides the motivation for the existence of the service. For the users, only this exposed behavior and value, together with non-functional aspects such as the quality of service, costs, etc., are relevant. These can be specified in a contract or Service Level Agreement (SLA). Services are accessible through interfaces."@en , "An external behavior element, called a service, represents an explicitly defined exposed behavior."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :BehaviourElement .

:Application_Service  a  owl:Class ;
        rdfs:comment     "An application service represents an explicitly defined exposed application behavior."@en , "An application service exposes the functionality of components to their environment. This functionality is accessed through one or more application interfaces. An application service is realized by one or more application functions that are performed by the component. It may require, use, and produce data objects.\nAn application service should be meaningful from the point of view of the environment; it should provide a unit of behavior that is, in itself, useful to its users. It has a purpose, which states this utility to the environment. This means, for example, that if this environment includes business processes, application services should have business relevance.\nA purpose may be associated with an application service. An application service may serve business processes, business functions, business interactions, or application functions. An application function may realize an application service. An application interface may be assigned to an application service. An application service may access data objects. The name of an application service should preferably be a verb ending with “ing”; e.g., “transaction processing”. Also, a name explicitly containing the word “service” may be used."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalBehaviorElement , :ApplicationElement , :Accessor_Type1 .

:System_Software  a      owl:Class ;
        rdfs:comment     "ystem software represents software that provides or contributes to an environment for storing, executing, and using software or data deployed within it."@en , "System software is a specialization of a node that is used to model the software environment in which artifacts run. This can be, for example, an operating system, a JEE application server, a database system, or a workflow engine. Also, system software can be used to represent, for example, communication middleware. Usually, system software is combined with a device representing the hardware environment to form a general node.\nA device or system software can be assigned to other system software; e.g., to model different layers of software running on top of each other. System software can be assigned to artifacts, to model that these artifacts are deployed on that software. System software can realize other system software. A node can be composed of system software.\nThe name of system software should preferably be a noun referring to the type of execution environment; e.g., “JEE server”. System software may be composed of other system software; e.g., an operating system containing a database."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :Source_Type2 , :Serving_Type1 , :PhysicalElement , :InternalActiveStructureElement , :Accessor_Type1 .

:ArchitectureRational
        a                owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:StructuralRelationship
        a                owl:Class , owl:ObjectProperty ;
        rdfs:comment     "Structural relationships, which model the static construction or composition of concepts of the same or different types"^^rdfs:Literal ;
        rdfs:subClassOf  :ArchiMateModelingRelation .

:Realization_Type2  a  owl:Class .

:Aggregated_by_material
        a                   owl:ObjectProperty ;
        rdfs:domain         :Material ;
        rdfs:range          :Material , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Composition  a          owl:Class ;
        rdfs:subClassOf  :StructuralRelationship .

:Inverse_of_Realization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :StructuralRelationship ;
        owl:inverseOf       :RealizationR .

:Specialization_relation_from_businessInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Interface ;
        rdfs:range          :Grouping , :Business_Interface ;
        rdfs:subPropertyOf  :SpecializationR .

:Technology_Interface
        a                owl:Class ;
        rdfs:comment     "A technology interface specifies how the technology services of a node can be accessed by other nodes. A technology interface exposes a technology service to the environment. The same service may be exposed through different interfaces.\nIn a sense, a technology interface specifies a kind of contract that a component realizing this interface must fulfill. This may include, for example, parameters, protocols used, pre- and post- conditions, and data formats.\nA technology interface may be part of a node through composition (not shown in the standard notation), which means that these interfaces are provided by that node, and can serve other nodes. A technology interface can be assigned to a technology service, to expose that service to the environment.\nThe name of a technology interface should preferably be a noun."@en , "A technology interface represents a point of access where technology services offered by a node can be accessed."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalActiveStructureElement , :Accessor_Type1 .

:Specialization_relation_from_goal
        a                   owl:ObjectProperty ;
        rdfs:domain         :Goal ;
        rdfs:range          :Grouping , :Goal ;
        rdfs:subPropertyOf  :SpecializationR .

:Business_Interface  a   owl:Class ;
        rdfs:comment     "A business interface is a point of access where a business service is made available to the environment.\nA business interface exposes the functionality of a business service to other business roles or actors. It is often referred to as a channel (telephone, Internet, local office, etc.). The same business service may be exposed through different interfaces.\nA business interface may be part of a business role or actor through a composition relationship, and a business interface may serve a business role. A business interface may be assigned to one or more business services, which means that these services are exposed by the interface. The name of a business interface should preferably be a noun."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalActiveStructureElement , :BusinessElement , :Accessor_Type1 .

:Aggregated_by_meaning
        a                   owl:ObjectProperty ;
        rdfs:domain         :Meaning ;
        rdfs:range          :Meaning , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:composition_001  a  :Composition , owl:NamedIndividual .

:Triggering_Type3  a  owl:Class .

:Meaning  a              owl:Class ;
        rdfs:comment     "Meaning represents the knowledge or expertise present in, or the interpretation given to, a core element in a particular context."@en , "A meaning represents the interpretation of an element of the architecture. In particular, this is used to describe the meaning of passive structure elements (for example, a document, message). It is a description that expresses the intent of that element; i.e., how it informs the external user.\nIt is possible that different users view the informative functionality of an element differently. For example, what may be a “registration confirmation” for a client could be a “client mutation” for a CRM department (assuming for the sake of argument that it is modeled as an external user). Also, various different representations may carry essentially the same meaning. For example, various different documents (a web document, a filled-in paper form, a “client contact” report from the call center) may essentially carry the same meaning."@en , "A meaning can be associated with any core element. To denote that a meaning is specific to a particular stakeholder, this stakeholder can also be associated to the meaning. The name of a meaning should preferably be a noun or noun phrase."@en ;
        rdfs:subClassOf  :PassiveStructureElement , :MotivationElement , :Influencer_Type2 .

:Interaction  a          owl:Class ;
        rdfs:comment     "An interaction is a unit of collective behavior performed by (a collaboration of) two or more active structure elements."@en ;
        rdfs:subClassOf  :InternalBehaviorElement .

:Specialization_relation_from_resource
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource ;
        rdfs:range          :Resource , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:InternalActiveStructureElement
        a                owl:Class ;
        rdfs:comment     "An internal active structure element represents an entity that is capable of performing behavior."@en ;
        rdfs:subClassOf  :ActiveStructureElement .

:Distribution_Network
        a                owl:Class ;
        rdfs:comment     "A distribution network represents the physical distribution or transportation infrastructure. It embodies the physical realization of the logical paths between nodes.\nA distribution network connects two or more nodes. A distribution network may realize one or more paths. A distribution network can consist of sub-networks and can aggregate facilities and equipment, for example, to model railway stations and trains that are part of a rail network."@en , "A distribution network represents a physical network used to transport materials or energy."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :Accessor_Type1 .

:Specialization_relation_from_applicationFunction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Function ;
        rdfs:range          :Grouping , :Application_Function ;
        rdfs:subPropertyOf  :SpecializationR .

:Business_Object  a      owl:Class ;
        rdfs:comment     "As explained in Section 3.6, the ArchiMate language in general focuses on the modeling of types, not instances, since this is the most relevant at the Enterprise Architecture level of description. Hence a business object typically models an object type (cf. a UML class) of which multiple instances may exist in operations. Only occasionally, business objects represent actual instances of information produced and consumed by behavior elements such as business processes. This is in particular the case for singleton types; i.e., types that have only one instance.\nA wide variety of types of business objects can be defined. Business objects are passive in the sense that they do not trigger or perform processes. A business object could be used to represent information assets that are relevant from a business point of view and can be realized by data objects.\nBusiness objects may be accessed (e.g., in the case of information objects, they may be created, read, written) by a business process, function, business interaction, business event, or business service. A business object may have association, specialization, aggregation, or composition relationships with other business objects. A business object may be realized by a representation or by a data object (or both). The name of a business object should preferably be a noun."@en , "A business object represents a concept used within a particular business domain."@en ;
        rdfs:subClassOf  :PassiveStructureElement , :Influencer_Type2 , :BusinessElement .

:Concern  a              owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Aggregated_by_technologyFunctionOrProcessOrInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Process , :Technology_Interaction , :Technology_Function ;
        rdfs:range          :Technology_Process , :Technology_Interaction , :Technology_Function , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_stakeholder
        a                   owl:ObjectProperty ;
        rdfs:domain         :Stakeholder ;
        rdfs:range          :Stakeholder , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:BehaviourElement  a     owl:Class ;
        rdfs:comment     "No separate physical behavior elements are defined. Rather, the behavior elements from the Technology Layer (technology function, process, interaction, service, and event) are used to model the behavior of all nodes, including physical equipment. Since equipment will very often be computer-controlled or in other ways have a close relationship to IT (also think of sensors, Internet of Things), their behavior can be described in an integral way using the existing technology behavior concepts."@en , "Behavior in the Application Layer is described in a way that is very similar to Business Layer behavior. Also here, a distinction is made between the external behavior of application components in terms of application services, and the internal behavior of these components; i.e., application functions that realize these services.\nAn application service is an externally visible unit of behavior, provided by one or more components, exposed through well-defined interfaces, and meaningful to the environment. The service element provides a way to explicitly describe the functionality that components share with each other and the functionality that they make available to the environment. The concept fits well within service-oriented application architecture. The functionality that an interactive computer program provides through a user interface is also modeled using an application service, exposed by an application-to-business interface representing the user interface. Internal application services are exposed through an application-to-application interface.\nAn application function describes the internal behavior of a component needed to realize one or more application services. In analogy with the Business Layer, an application process models an ordering of application behavior, as a counterpart of a business process. Note that the internal behavior of a component should in most cases not be modeled in too much detail in an architectural description, because for the description of this behavior we may soon be confronted with detailed design issues.\nAn application interaction is the behavior of a collaboration of two or more application components. An application interaction is external behavior from the perspective of each of the participating components, but the behavior is internal to the collaboration as a whole."@en , "Behavior elements represent the dynamic aspects of the enterprise."@en , "Behavior elements in the Technology Layer are similar to the behavior elements in the other layers. Also here, a distinction is made between the external behavior of nodes in terms of technology services, and the internal behavior of these nodes; i.e., technology functions that realize these services."@en , "Based on service-orientation, a crucial design decision for the behavioral part of the ArchiMate metamodel is the distinction between “external” and “internal” behavior of an organization.\nThe externally visible behavior is modeled by the element business service. A business service represents a coherent piece of functionality that offers added value to the environment, independent of the way this functionality is realized internally. A distinction can be made between “external” business services, offered to external customers, and “internal” business services, offering supporting functionality to processes or functions within the organization.\nSeveral types of internal behavior elements that can realize a service are distinguished. Although the distinction between the two is not always sharp, it is often useful to distinguish a process view and a function view on behavior; two elements associated with these views, business process and business function, are defined. Both elements can be used to group more detailed business processes/functions, but based on different grouping criteria. A business process represents a workflow or value stream consisting of smaller processes/functions, with one or more clear starting points and leading to some result. It is sometimes described as “customer to customer”, where this customer may also be an internal customer, in the case of sub-processes within an organization. The goal of such a business process is to “satisfy or delight the customer” [10]. A business function offers functionality that may be useful for one or more business processes. It groups behavior based on, for example, required skills, resources, (application) support, etc. Typically, the business processes of an organization are defined based on the products and services that the organization offers, while the business functions are the basis for, for example, the assignment of resources to tasks and the application support.\nA business interaction is a unit of behavior similar to a business process or function, but which is performed in a collaboration of two or more roles within the organization. Unlike the interaction concept in Amber [9], which is an atomic unit of collaborative behavior, the ArchiMate business interaction can be decomposed into smaller interactions. Although interactions are external behavior from the perspective of the roles participating in the collaboration, the behavior is internal to the collaboration as a whole. Similar to processes or functions, the result of a business interaction can be made available to the environment through a business service.\nA business event is something that happens (externally) and may influence business processes, functions, or interactions. The business event element is similar to BPMN event elements, to the trigger element in Amber [9], and the initial state and final state elements in UML activity diagrams. However, the ArchiMate business event is more generally applicable in the sense that it can also be used to model other types of events, in addition to triggers.\nIn the Business Layer, three types of internal behavior element are defined: business process, business function, and business interaction."@en ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:inverse_of_TargetRelationshipForFlow
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:ViewpointElement  a  owl:Class ;
        rdfs:comment  "Views are an ideal mechanism to purposefully convey information about architecture areas. In general, a view is defined as a part of an Architecture Description that addresses a set of related concerns and is tailored for specific stakeholders. A view is specified by means of a viewpoint, which prescribes the concepts, models, analysis techniques, and visualizations that are provided by the view. Simply put, a view is what you see and a viewpoint is where you are looking from.\nAn Architecture Description includes one or more architecture views. An architecture view (or simply view) addresses one or more of the concerns held by a stakeholder of the system.\nAn architecture view expresses the architecture of the system of interest in accordance with an architecture viewpoint (or simply viewpoint). There are two aspects to a viewpoint: the concerns it frames for the stakeholders and the conventions it establishes on views.\nAn architecture viewpoint frames one or more concerns. A concern can be framed by more than one viewpoint.\nA view is governed by its viewpoint: the viewpoint establishes the conventions for constructing, interpreting, and analyzing the view to address concerns framed by that viewpoint. Viewpoint conventions can include languages, notations, model kinds, design rules and/or modeling methods, analysis techniques, and other operations on views.\nViewpoints are a means to focus on particular aspects and layers of the architecture. These aspects and layers are determined by the concerns of a stakeholder with whom communication takes place. What should and should not be visible from a specific viewpoint is therefore entirely dependent on the argumentation with respect to a stakeholder’s concerns.\nViewpoints are designed for the purpose of communicating certain aspects and layers of an architecture. The communication enabled by a viewpoint can be strictly informative, but in general is bi-directional. The architect informs stakeholders, and stakeholders give their feedback (critique or consent) on the presented aspects and layers. What is and what is not shown in a view depends on the scope of the viewpoint and on what is relevant to the concerns of the stakeholder. Ideally, these are the same; i.e., the viewpoint is designed with specific concerns of a stakeholder in mind. Relevance to a stakeholder’s concern, therefore, is the selection criterion that is used to determine which elements and relationships are to appear in a view."@en .

:Source_Type3  a  owl:Class .

:Triggering_relation_from_triggering_type3
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering_Type3 ;
        rdfs:range          :Triggering_Type3 ;
        rdfs:subPropertyOf  :TriggeringR .

:inverse_of_TargetRelationshipForAssociation
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:inverse_of_TargetRelationshipForSpecialization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Application_Component
        a                owl:Class ;
        rdfs:comment     "An application component represents an encapsulation of application functionality aligned to implementation structure, which is modular and replaceable. It encapsulates its behavior and data, exposes services, and makes them available through interfaces."@en , "An application component is a self-contained unit. As such, it is independently deployable, re- usable, and replaceable. An application component performs one or more application functions. It encapsulates its contents: its functionality is only accessible through a set of application interfaces. Cooperating application components are connected via application collaborations.\nAn application component may be assigned to one or more application functions. An application component has one or more application interfaces, which expose its functionality. Application interfaces of other application components may serve an application component. The name of an application component should preferably be a noun.\nThe application component element is used to model entire applications (i.e., deployed and operational IT systems, as defined by the TOGAF framework [4]) and individual parts of such applications, at all relevant levels of detail."@en ;
        rdfs:subClassOf  :Realization_Type2 , :Serving_Type1 , :Source_Type2 , :ApplicationElement , :Triggering_Type1 , :Influencer_Type1 , :Accessor_Type1 , :InternalActiveStructureElement .

:ActiveStructureElement
        a                owl:Class ;
        rdfs:comment     "The main active structure element for the Technology Layer is the node. This element is used to model structural entities in this layer. It strictly models the structural aspect of a system: its behavior is modeled by an explicit relationship to the behavior element. A technology interface is the (logical) place where the technology services offered by a node can be accessed by other nodes or by application components from the Application Layer.\nNodes come in several flavors, including device and system software. A device models a physical computational resource, upon which artifacts may be deployed for execution. System software is an infrastructural software component running on a device. Typically, a node consists of a number of sub-nodes; for example, a device such as a server and system software to model the operating system.\nThe inter-relationships of components in the Technology Layer are mainly formed by the communication infrastructure. The path models the relation between two or more nodes, through which these nodes can exchange information. The physical realization of a path is modeled with a communication network; i.e., a physical communication medium between two or more devices (or other networks)."@en , "The main active structure element for the Application Layer is the application component. This element is used to model any structural entity in the Application Layer: not just (re-usable) software components that can be part of one or more applications, but also complete software applications, sub-applications, or information systems. Although very similar to the UML component , the ArchiMate application component element strictly models the structural aspect of an application; its behavior is modeled by an explicit relationship to the behavior element.\nAlso in the application architecture, the inter-relationships of components are an essential ingredient. Therefore, we also introduce the element of application collaboration here, defined as a collective of application components which perform application interactions. The element is very similar to the collaboration as defined in the UML standard [7], [8].\nIn the purely structural sense, an application interface is the (logical) channel through which the services of a component can be accessed. In a broader sense (as used in, among others, the UML definition), an application interface defines some elementary behavioral characteristics: it defines the set of operations and events that are provided by the component, or those that are required from the environment. Thus, it is used to describe the functionality of a component. The application interface element can be used to model both application-to-application interfaces, which offer internal application services, and application-to business interfaces (and/or user interfaces), which offer external application services."@en , "Active structure elements can perform behavior on passive structure elements."@en ;
        rdfs:subClassOf  :StructureElement .

:aggregation_009  a  :Aggregation , owl:NamedIndividual .

:Deciding  a          :Purpose , owl:NamedIndividual ;
        rdfs:comment  "Decision support viewpoints assist managers in the process of decision-making by offering insight into cross-domain architecture relationships, typically through projections and intersections of underlying models, but also by means of analytical techniques. Typical examples are cross-reference tables, landscape maps, lists, and reports." .

:Triggering  a           owl:Class ;
        rdfs:subClassOf  :DynamicRelationship .

:TargetRelationshipForFlow
        a                   owl:ObjectProperty ;
        rdfs:domain         :Flow ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForFlow .

:inverse_of_SourceRelationshipForRealization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

_:b2    a                   owl:Restriction ;
        owl:onProperty      :inverse_of_SourceRelationshipForAccess ;
        owl:someValuesFrom  :Accessor_Type1 .

:Specialization_relation_from_businessService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Service ;
        rdfs:range          :Grouping , :Business_Service ;
        rdfs:subPropertyOf  :SpecializationR .

:aggregation_010  a  :Aggregation , owl:NamedIndividual .

:AssociationR  a                owl:ObjectProperty ;
        rdfs:domain             :ArchiMateModelingEntity ;
        rdfs:range              :ArchiMateModelingEntity ;
        rdfs:subPropertyOf      :OtherRelationship ;
        owl:inverseOf           :Inverse_of_association ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForAssociation :TargetRelationshipForAssociation ) .

_:b3    a                   owl:Class ;
        owl:intersectionOf  ( _:b4 _:b2 ) .

:Aggregated_by_product
        a                   owl:ObjectProperty ;
        rdfs:domain         :Product ;
        rdfs:range          :Representation , :Technology_Service , :Grouping , :Artifact , :Product , :Business_Object , :Business_Service , :Contract , :Material , :Application_Service , :Data_Object ;
        rdfs:subPropertyOf  :AggregationR .

:Serving_relation_from_serving_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource , :Capability ;
        rdfs:range          :Junction , :Grouping , :Course_of_Action , :Capability ;
        rdfs:subPropertyOf  :ServingR .

:Specialization_relation_from_representation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Representation ;
        rdfs:range          :Representation , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Details  a           :Aspect , owl:NamedIndividual ;
        rdfs:comment  "Views on the detailed level typically consider one layer and one aspect from the ArchiMate Core Framework. Typical stakeholders are a software engineer responsible for design and implementation of a software component or a process owner responsible for effective and efficient process execution." .

:Implementation_Event
        a                owl:Class ;
        rdfs:comment     "Work packages may be triggered or interrupted by an implementation event. Also, work packages may raise events that trigger other behavior. Unlike a work package, an event is instantaneous: it does not have duration.\nAn implementation event may have a time attribute that denotes the moment or moments at which the event happens. For example, this can be used to model project schedules and milestones; e.g., an event that triggers a work package, an event that denotes its completion (with a triggering relationship from the work package to the event), or an event that denotes a lifecycle change of a deliverable (via an access relationship to that deliverable).\nImplementation events access deliverables to fulfill project objectives. For example, in a project to deliver a completely new application along with the technology needed to host it, an implementation event “Release to production” could access the deliverables “Final build”, “Staging environment”, and “Production environment”.\nAn implementation event may trigger or be triggered (raised) by a work package or a plateau. An implementation event may access a deliverable and may be composed of other implementation events.\nAn implementation event may be associated with any core element; e.g., to indicate a lifecycle state change. The name of an implementation event should preferably be a verb in the perfect tense; e.g., “project initiation phase completed”."@en , "An implementation event is a behavior element that denotes a state change related to implementation or migration."@en ;
        rdfs:subClassOf  :Source_Type3 , :ImplementationMigrationElement , :Accessor_Type3 , :Event , :Influencer_Type2 , :Realization_Type1 , :Triggering_Type2 .

:Goal   a                owl:Class ;
        rdfs:comment     "In principle, a goal can represent anything a stakeholder may desire, such as a state of affairs, or a produced value. Examples of goals are: to increase profit, to reduce waiting times at the helpdesk, or to introduce online portfolio management. Goals are typically used to measure success of an organization.\nGoals are generally expressed using qualitative words; e.g., “increase”, “improve”, or “easier”. Goals can also be decomposed; e.g., Increase profit can be decomposed into the goals Reduce cost and Increase sales. However, it is also very common to associate concrete outcomes with goals, which can be used to describe both the quantitative and time-related results that are essential to describe the desired state, and when it should be achieved."@en , "A goal represents a high-level statement of intent, direction, or desired end state for an organization and its stakeholders."@en ;
        rdfs:subClassOf  :MotivationElement , :Influencer_Type2 .

:SystemOfInterest  a     owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:TargetRelationshipForAssignment
        a                   owl:ObjectProperty ;
        rdfs:domain         :Assignment ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForAssignment .

:SpecializationR  a             owl:ObjectProperty ;
        rdfs:domain             :Application_Process ;
        rdfs:range              :Application_Process ;
        rdfs:subPropertyOf      :OtherRelationship ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForSpecialization :TargetRelationshipForSpecialization ) .

_:b4    a                   owl:Restriction ;
        owl:onProperty      :TargetRelationshipForAccess ;
        owl:someValuesFrom  [ a            owl:Class ;
                              owl:unionOf  ( :Equipment :Location )
                            ] .

:Influence_relation_from_influencer_type2
        a                   owl:ObjectProperty ;
        rdfs:domain         :Influencer_Type2 ;
        rdfs:range          :Outcome , :Goal , :Junction , :Requirement , :Assessment , :Value , :Constraint , :Meaning , :Driver , :Grouping , :Principle ;
        rdfs:subPropertyOf  :InfluenceR .

:Derivation_Rule_for_Structural_and_Dependency_Relationships
        a                owl:Class ;
        rdfs:comment     "Transitively applying this property allows us to replace a ‘chain’ of structural relationships (with intermediate model elements) by the weakest structural relationship in the chain. For a more formal description and derivation of this rule the reader is referred to [11]. Note that the resulting derived relationship is a potential relationship, which is what is needed for impact analysis. To derive certain relationships, other derivation rules are needed, which are beyond the scope of this standard."@en , "The structural and dependency relationships can be ordered by ‘strength’. Structural relationships are ‘stronger’ than dependency relationships, and the relationships within these categories can also be ordered by strength:\n􏰀 Influence (weakest)\n􏰀 Access\n􏰀 Serving\n􏰀 Realization\n􏰀 Assignment\n􏰀 Aggregation\n􏰀 Composition (strongest)\nPart of the language definition is an abstraction rule that states that two relationships that join at an intermediate element can be combined and replaced by the weaker of the two."@en , "If two structural or dependency relationships r:R and s:S are permitted between elements a, b, and c such that r(a,b) and s(b,c), then a structural relationship t:T is also permitted, with t(a,c) and type T being the weakest of R and S."@en ;
        rdfs:subClassOf  :Derivation_Rule .

:hasPurpose  a       owl:ObjectProperty ;
        rdfs:domain  :ArchiMateViewpoint .

:Aggregation  a          owl:Class ;
        rdfs:subClassOf  :StructuralRelationship .

:Inverse_of_flow  a         owl:ObjectProperty ;
        rdfs:subPropertyOf  :DynamicRelationship .

:Aggregated_by_businessProcessOrFunctionOrInteraction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Process , :Business_Interaction , :Business_Function ;
        rdfs:range          :Grouping , :Business_Process , :Business_Interaction , :Business_Function ;
        rdfs:subPropertyOf  :AggregationR .

:Access  a               owl:Class ;
        rdfs:subClassOf  :DependencyRelationShip ;
        rdfs:subClassOf  [ a            owl:Class ;
                           owl:unionOf  ( _:b5 _:b3 )
                         ] .

:Used_by  a                 owl:ObjectProperty ;
        rdfs:comment        "Compared to the earlier versions of this standard, the name of this relationship has been changed from ‘used by’ to ‘serving’, to better reflect its direction with an active verb: a service serves a user. The meaning of the relationship has not been altered. The ‘used by’ designation is still allowed but deprecated, and will be removed in a future version of the standard."@en ;
        rdfs:label          "Is used" ;
        rdfs:subPropertyOf  :DependencyRelationShip .

:aggregation_004  a  :Aggregation , owl:NamedIndividual .

:Specialization_relation_from_capability
        a                   owl:ObjectProperty ;
        rdfs:domain         :Capability ;
        rdfs:range          :Grouping , :Capability ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForAccess
        a                   owl:ObjectProperty ;
        rdfs:domain         :Access ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForAccess .

:Specialization_relation_from_distributionNetwork
        a                   owl:ObjectProperty ;
        rdfs:domain         :Distribution_Network ;
        rdfs:range          :Grouping , :Distribution_Network ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_technologyProcess
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Process ;
        rdfs:range          :Technology_Process , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_location
        a                   owl:ObjectProperty ;
        rdfs:domain         :Location ;
        rdfs:range          :ArchiMateModelingEntity ;
        rdfs:subPropertyOf  :AggregationR .

:SourceTargetRelationship
        a       owl:ObjectProperty .

:ArchitectureDescription
        a                owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:isResourceComposedOf
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource ;
        rdfs:range          :Resource , :Grouping ;
        rdfs:subPropertyOf  :CompositionR .

:UserDefinedProfile  a   owl:Class ;
        rdfs:comment     "Through a profile definition language, the user is able to define new profiles, thus extending the definition of ArchiMate elements or relationships with supplementary attribute sets."@en ;
        rdfs:subClassOf  :Profile .

:Specialization_relation_from_applicationProcess
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Process ;
        rdfs:range          :Grouping , :Application_Process ;
        rdfs:subPropertyOf  :SpecializationR .

:Triggering_Type4  a  owl:Class .

:Specialization_relation_from_path
        a                   owl:ObjectProperty ;
        rdfs:domain         :Path ;
        rdfs:range          :Path , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_requirementOrConstraint
        a                   owl:ObjectProperty ;
        rdfs:domain         :Requirement , :Constraint ;
        rdfs:range          :Requirement , :Constraint ;
        rdfs:subPropertyOf  :SpecializationR .

_:b5    a                   owl:Class ;
        owl:intersectionOf  ( _:b1 _:b0 ) .

:Principle  a            owl:Class ;
        rdfs:comment     "Principles are strongly related to goals and requirements. Similar to requirements, principles define intended properties of systems. However, in contrast to requirements, principles are broader in scope and more abstract than requirements. A principle defines a general property that applies to any system in a certain context. A requirement defines a property that applies to a specific system as described by an architecture.\nA principle needs to be made specific for a given system by means of one or more requirements, in order to enforce that the system conforms to the principle. For example, the principle “Information management processes comply with all relevant laws, policies, and regulations” is realized by the requirements that are imposed by the actual laws, policies, and regulations that apply to the specific system under design.\nA principle is motivated by some goal or driver. For example, the aforementioned principle may be motivated by the goal to maintain a good reputation and/or the goal to avoid penalties. The principle provides a means to realize its motivating goal, which is generally formulated as a guideline. This guideline constrains the design of all systems in a given context by stating the general properties that are required from any system in this context to realize the goal. Principles are intended to be more stable than requirements in the sense that they do not change as quickly as requirements may do. Organizational values, best practices, and design knowledge may be reflected and made applicable in terms of principles."@en , "A principle represents a qualitative statement of intent that should be met by the architecture."@en ;
        rdfs:subClassOf  :MotivationElement , :Influencer_Type2 .

:Aggregated_by_requirementOrConstraint
        a                   owl:ObjectProperty ;
        rdfs:domain         :Requirement , :Constraint ;
        rdfs:range          :Requirement , :Grouping , :Constraint ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_technologyFunction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Function ;
        rdfs:range          :Technology_Function , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Business_Interaction
        a                owl:Class ;
        rdfs:comment     "A business interaction is similar to a business process/function, but while a process/function may be performed by a single role, an interaction is performed by a collaboration of multiple roles. The roles in the collaboration share the responsibility for performing the interaction.\nA business interaction may be triggered by, or trigger, any other business behavior element (business event, business process, business function, or business interaction). A business interaction may access business objects. A business interaction may realize one or more business services and may use (internal) business services or application services. A business collaboration may be assigned to a business interaction. The name of a business interaction should preferably be a verb in the simple present tense."@en , "A business interaction is a unit of collective business behavior performed by (a collaboration of) two or more business roles."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Interaction , :Influencer_Type1 , :BusinessElement , :Accessor_Type1 .

:Technology_Process  a   owl:Class ;
        rdfs:comment     "A technology process represents a sequence of technology behaviors that achieves a specific outcome."@en , "A technology process describes internal behavior of a node; for the user of that node, this process is invisible. If its behavior is exposed externally, this is done through one or more technology services. A technology process abstracts from the way it is implemented. Only the necessary behavior is specified. It can use technology objects as input and use or transform these to produce other technology objects as output.\nA technology process may realize technology services. Other technology services may serve (be used by) a technology process. A technology process may access technology objects. A node may be assigned to a technology process, which means that this node performs the process. The name of a technology process should clearly identify a series of technology behaviors; e.g., “System boot sequence” or “Replicate database”."@en ;
        rdfs:subClassOf  :Process , :Influencer_Type1 , :Serving_Type1 , :Source_Type2 , :Accessor_Type1 , :Triggering_Type1 , :TechnologyPhysicalElement .

:Tactic  a               owl:Class ;
        rdfs:subClassOf  :Course_of_Action .

:Realization  a          owl:Class ;
        rdfs:subClassOf  :StructuralRelationship .

:Assignment  a           owl:Class ;
        rdfs:subClassOf  :StructuralRelationship .

:Aggregated_by_plateau
        a                   owl:ObjectProperty ;
        rdfs:domain         :Plateau ;
        rdfs:range          :StrategyElement , :Constraint , :Plateau , :Requirement , :Goal , :BusinessElement , :ApplicationElement , :TechnologyPhysicalElement ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_applicationComponent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Component ;
        rdfs:range          :Grouping , :Application_Component ;
        rdfs:subPropertyOf  :SpecializationR .

:Device  a               owl:Class ;
        rdfs:comment     "A device is a specialization of a node that represents a physical IT resource with processing capability. It is typically used to model hardware systems such as mainframes, PCs, or routers. Usually, they are part of a node together with system software. Devices may be composite; i.e., consist of sub-devices.\nDevices can be interconnected by communication networks. Devices can be assigned to artifacts and to system software, to model that artifacts and system software are deployed on that device. A node can contain one or more devices.\nThe name of a device should preferably be a noun referring to the type of hardware; e.g., “IBM System z mainframe”.\nDifferent icons may be used to distinguish between different types of devices; e.g., mainframes and PCs."@en , "A device is a physical IT resource upon which system software and artifacts may be stored or deployed for execution."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Node , :Accessor_Type1 .

:Aggregated_by_communicationNetwork
        a                   owl:ObjectProperty ;
        rdfs:domain         :Communication_Network ;
        rdfs:range          :Communication_Network , :Technology_Collaboration , :Node , :Facility , :Equipment , :Device , :Technology_Interface , :Grouping , :System_Software ;
        rdfs:subPropertyOf  :AggregationR .

:Plateau  a              owl:Class ;
        rdfs:comment     "An important premise in the TOGAF framework is that the various architectures are described for different stages in time. In each of the Phases B, C, and D of the ADM, a Baseline Architecture and Target Architecture are created, describing the current situation and the desired future situation. In Phase E (Opportunities and Solutions), so-called Transition Architectures are defined, showing the enterprise at incremental states reflecting periods of transition between the Baseline and Target Architectures. Transition Architectures are used to allow for individual work packages and projects to be grouped into managed portfolios and programs, illustrating the business value at each stage.\nIn order to support this, the plateau element is defined."@en , "A plateau represents a relatively stable state of the architecture that exists during a limited period of time."@en ;
        rdfs:subClassOf  :Triggering_Type2 , :Realization_Type1 , :Plateau , :Influencer_Type2 , :ImplementationMigrationElement .

:Business_Function  a    owl:Class ;
        rdfs:comment     "Just like a business process, a business function also describes internal behavior performed by a business role. However, while a business process groups behavior based on a sequence or flow of activities that is needed to realize a product or service, a business function typically groups behavior based on required business resources, skills, competencies, knowledge, etc.\nThere is a potential many-to-many relation between business processes and business functions. Complex processes in general involve activities that offer various functions. In this sense a business process forms a string of business functions. In general, a business function delivers added value from a business point of view. Organizational units or applications may coincide with business functions due to their specific grouping of business activities.\nA business function may be triggered by, or trigger, any other business behavior element (business event, business process, business function, or business interaction). A business function may access business objects. A business function may realize one or more business services and may be served by business, application, or technology services. A business role may be assigned to a business function. The name of a business function should clearly indicate a well-defined behavior. Examples are customer management, claims administration, member services, recycling, or payment processing."@en , "A business function is a collection of business behavior based on a chosen set of criteria (typically required business resources and/or competencies), closely aligned to an organization, but not necessarily explicitly governed by the organization."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :Function , :BusinessElement , :Accessor_Type1 .

:Designing  a         :Purpose , owl:NamedIndividual ;
        rdfs:comment  "Design viewpoints support architects and designers in the design process from initial sketch to detailed design. Typically, design viewpoints consist of diagrams, like those used in, for example, UML." .

:Collaboration  a        owl:Class ;
        rdfs:comment     "A collaboration is an aggregate of two or more active structure elements, working together to perform some collective behavior."@en ;
        rdfs:subClassOf  :InternalActiveStructureElement .

:Specialization_relation_from_workPackage
        a                   owl:ObjectProperty ;
        rdfs:domain         :Work_Package ;
        rdfs:range          :Work_Package , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Aggregated_by_goal  a      owl:ObjectProperty ;
        rdfs:domain         :Goal ;
        rdfs:range          :Grouping , :Goal ;
        rdfs:subPropertyOf  :AggregationR .

:Data_Object  a          owl:Class ;
        rdfs:comment     "A data object should be a self-contained piece of information with a clear meaning to the business, not just to the application level. Typical examples of data objects are a customer record, a client database, or an insurance claim.\nAs explained in Section 3.6, the ArchiMate language in general focuses on the modeling of types, not instances, since this is the most relevant at the Enterprise Architecture level of description. Hence a data object typically models an object type (cf. a UML class) of which multiple instances may exist in operational applications. An important exception is when a data object is used to model a data collection such as a database, of which only one instance exists.\nAn application function or process can operate on data objects. A data object may be communicated via interactions and used or produced by application services. A data object can be accessed by an application function, application interaction, or application service. A data object may realize a business object, and may be realized by an artifact. A data object may have association, specialization, aggregation, or composition relationships with other data objects. The name of a data object should preferably be a noun."@en , "A data object represents data structured for automated processing."@en ;
        rdfs:subClassOf  :PassiveStructureElement , :Influencer_Type2 , :ApplicationElement .

:Triggering_relation_from_triggering_type4
        a                   owl:ObjectProperty ;
        rdfs:domain         :Triggering_Type4 ;
        rdfs:range          :Triggering_Type4 ;
        rdfs:subPropertyOf  :TriggeringR .

:TargetRelationshipForInfluence
        a                   owl:ObjectProperty ;
        rdfs:domain         :Influence ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForInfluence .

:hasAspect  a        owl:ObjectProperty ;
        rdfs:domain  :ArchiMateViewpoint ;
        rdfs:range   :Aspect .

:Location  a             owl:Class ;
        rdfs:comment     "A location is a place or position where structure elements can be located or behavior can be performed."@en , "The location element is used to model the places where (active and passive) structure elements such as business actors, application components, and devices are located. This is modeled by means of an aggregation relationship from a location to structure element. A location can also aggregate a behavior element, to indicate where the behavior is performed. This element corresponds to the “Where” column of the Zachman framework [5]."@en ;
        rdfs:subClassOf  :Serving_Type1 , :Accessor_Type1 , :CompositeElement , :Triggering_Type1 , :OtherElements , :InternalActiveStructureElement , :Influencer_Type1 .

:Capability  a           owl:Class ;
        rdfs:comment     "In the field of business, strategic thinking and planning delivers strategies and high-level goals that are often not directly implementable in the architecture of an organization. These long-term or generic plans need to be specified and made actionable in a way that both business leaders and Enterprise Architects can relate to, and at a relatively high abstraction level.\nCapabilities help to reduce this gap by focusing on business outcomes. On the one hand, they provide a high-level view of the current and desired abilities of an organization, in relation to its strategy and its environment. On the other hand, they are realized by various elements (people, processes, systems, and so on) that can be described, designed, and implemented using Enterprise Architecture approaches. Capabilities may also have serving relationships; for example, to denote that one capability contributes to another.\nCapabilities are expressed in general and high-level terms and are typically realized by a combination of organization, people, processes, information, and technology. For example, marketing, customer contact, or outbound telemarketing [4].\nCapabilities are typically aimed at achieving some goal or delivering value by realizing an outcome. Capabilities are themselves realized by core elements. To denote that a set of core elements together realizes a capability, grouping can be used.\nCapabilities are often used for capability-based planning, to describe their evolution over time. To model such so-called capability increments, the specialization relationship can be used to denote that a certain capability increment is a specific version of that capability. Aggregating those increments and the core elements that realize them in plateaus (see Section 13.2.4) can be used to model the evolution of the capabilities."@en , "A capability represents an ability that an active structure element, such as an organization, person, or system, possesses."@en ;
        rdfs:subClassOf  :Triggering_Type3 , :StrategyElement , :Source_Type1 , :Influencer_Type2 , :BehaviourElement .

:       a               owl:Ontology ;
        rdfs:comment    "Some points that can be a problem or that is not implemented with Archi - were identified in the specification of ArchiMate:\n1- A relationship with as one end another relationship -  implemented.\n2- strengh of influence - not implemented in Archi\n3- Specialization - as a model contains only instances of modeling constructs, can an instance be a specialization of another instance. Specialization should be a relation between classes\n4- a flow can be associated to flowing element with an association relationship -  implemented in the last version of Archi. The way is it model in UML is more sophisticated and not related to flows. Let's note that the association is not typed (specialized) and that it's nature is related to the fact it is associated to a flow. Can be something abstract or a behavior be subject to a flow? Archi allows that. Do specs also?\n5- can the rule\nIf two structural or dependency relationships r:R and s:S are permitted between elements a, b, and c such that r(a,b) and s(b,c), then a structural relationship t:T is also permitted, with t(a,c) and type T being the weakest of R and S.\nformalized with OWL2 (paths)\nIdem for\nIf there is a flow relationship r from element a to element b, and a structural relationship from element c to element a, a flow relationship r can be derived from element c to element b.\n􏰀 If there is a flow relationship r from element a to element b, and a structural relationship from element d to element b, a flow relationship r can be derived from element a to element d.\nIf there is a triggering relationship r from element a to element b, and an assignment relationship from element c to element a, a triggering relationship r can be derived from element c to element b.\n􏰀 If there is a triggering relationship r from element a to element b, and an assignment relationship from element d to element b, a triggering relationship r can be derived from element a to element d.\nIf there is a triggering relationship from element a to element b, and a triggering relationship from element b to element c, a triggering relationship can be derived from element a to element c.\n=========\nReview of spec\n=========\nFigure 4 hierarchy... What does mean event? a class with all events for all layers?\nTechnology object described in a chapter but no symbol.Mistake?\nArticle only to rely on UML? From SPEM point of view, it is a concrete product. Also to be related to outcome and deliverable. What about input and ouptut  for functions or processes in order to be able to deal with functional analysis (similar to IDEF0)\nTo check that network realizes path and not the reverse\nWork Package defined as something generic, that can be a task, a project, a portfolio of project: not align with project management community\nDeliverable to be related to a contract?\nViewpoints provided only an informative way, and quite more poor than in the previous version. In addition, they were change\nProviding a more formal way for definin viewpoint based on composite modeling: de facto, views are based on upper level set of objects an implicit way. ArchiMate remains flat when it should gain being composite, i.e. multi scale\nNot happy with profiling, for the same reason than the usage of specialization. Both are to be used on concepts used as constructs of the language, not on individuals typed with these concepts. So an approach based on linkind data, i.e. individual, and allowing multi-typing or association of property a dynamic way (as it is possible with OWL), should be quite more relevant, as more dynamic  and more flexible.\nIt should allow to define measures for the qualitative properties." ;
        owl:versionIRI  <http://www.plm-interop.org/archimate/3.0> .

:ModelKind  a            owl:Class ;
        rdfs:subClassOf  :ViewpointElement .

:Cross_aspect_dependencies
        a                owl:Class ;
        rdfs:comment     "A business role may be assigned to a work package.\nA plateau is linked to an architecture that is valid for a certain time span. To indicate which parts of the architecture belong to a certain plateau, a plateau may aggregate or compose any of the concepts of the ArchiMate core language.\nA gap is associated with the core concepts that are unique to one of the plateaus linked by the gap; i.e., the core concepts that make up the difference between these plateaus.\nA deliverable may realize, among others, the implementation of an architecture or a part of an architecture. Therefore, any of the concepts of the ArchiMate core language may be linked to a deliverable by means of a realization relationship.\nLike most of the core language concepts, a composite element may be aggregate a work package or deliverable.\nWeaker relationships may also be defined. For example, the association relationship may be used to show that parts of the architecture are affected in some way by certain work packages.\nStrictly speaking, the relationships between the implementation and migration elements and the motivation elements are indirect relationships; e.g., a deliverable realizes a requirement or goal through the realization of an ArchiMate core element (e.g., an application component, business process, or service). However, it is still useful to make these relationships explicit, to show directly that a deliverable is needed to realize certain requirements and goals.\nAlso, goals, outcomes, capabilities, and requirements can be associated with a certain plateau; e.g., certain requirements may only be applicable to the Target Architecture, while others may apply to a certain Transition Architecture. Similarly, plateaus can be used for capability-based planning. This can be modeled by means of the aggregation or composition relationships.\nFigure 105 summarizes the relationships between implementation and migration elements and motivation elements. Goals, outcomes, capabilities, and requirements can be aggregated or composed in plateaus. Requirements and capabilities can be realized by deliverables. Since outcomes and goals are realized by capabilities and requirements, they can of course be realized indirectly by deliverables as well."@en ;
        rdfs:subClassOf  :Derivation_Rule .

:Business_Collaboration
        a                owl:Class ;
        rdfs:comment     "A business collaboration is an aggregate of two or more business internal active structure elements that work together to perform collective behavior."@en , "A business process or function may be interpreted as the internal behavior of a single business role. In some cases, behavior is the collective effort of more than one business role; in fact, a collaboration of two or more business roles results in collective behavior which may be more than simply the sum of the behavior of the separate roles. Business collaborations represent this collective effort. Business interactions are used to describe the internal behavior that takes place within business collaboration. A collaboration is a (possibly temporary) collection of business roles or actors within an organization, which perform collaborative behavior (interactions). Unlike a department, which may also group roles, a business collaboration need not have an official (permanent) status within the organization; it is specifically aimed at a specific interaction or set of interactions between roles. It is especially useful in modeling B2B interactions between different organizations such as provider networks, and also for describing social networks.\nA business collaboration may aggregate a number of business roles or actors, and may be assigned to one or more business interactions or other business internal behavior elements. A business interface or an application interface may serve a business collaboration, while a business collaboration may have business interfaces (through composition, and also through aggregation via derived relationships). The name of a business collaboration should preferably be a noun. It is also rather common to leave a business collaboration unnamed."@en ;
        rdfs:subClassOf  :Collaboration , :BusinessElement , :Accessor_Type1 , :Serving_Type1 , :Influencer_Type1 , :Source_Type2 , :Triggering_Type1 .

:aggregation_011  a  :Aggregation , owl:NamedIndividual .

:TargetRelationshipForRealization
        a                   owl:ObjectProperty ;
        rdfs:domain         :Realization ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForRealization .

:Requirement  a          owl:Class ;
        rdfs:comment     "In the end, a business goal must be realized by a plan or concrete change goal, which may or may not require a new system or changes to an existing system.\nThe term “system” is used in its general meaning; i.e., as a group of (functionally) related elements, where each element may be considered as a system again. Therefore, a system may refer to any active structural element, behavior element, or passive structural element of some organization, such as a business actor, application component, business process, application service, business object, or data object.\nRequirements model the properties of these elements that are needed to achieve the “ends” that are modeled by the goals. In this respect, requirements represent the “means” to realize goals.\nDuring the design process, goals may be decomposed until the resulting sub-goals are sufficiently detailed to enable their realization by properties that can be exhibited by systems. At this point, goals can be realized by requirements that demand these properties from the systems.\nFor example, one may identify two alternative requirements to realize the goal to improve portfolio management:\n􏰀 By assigning a personal assistant to each customer, or\n􏰀 By introducing online portfolio management\nThe former requirement can be realized by a human actor and the latter by a software application. These requirements can be decomposed further to define the requirements on the human actor and the software application in more detail."@en , "A requirement represents a statement of need that must be met by the architecture."@en ;
        rdfs:subClassOf  :Requirement , :MotivationElement , :Influencer_Type2 .

:Specialization_relation_from_technologyService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Service ;
        rdfs:range          :Technology_Service , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:FlowR  a                       owl:ObjectProperty ;
        rdfs:subPropertyOf      :DynamicRelationship ;
        owl:inverseOf           :Inverse_of_flow ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForFlow :TargetRelationshipForFlow ) .

:Serving_relation_from_serving_type3
        a                   owl:ObjectProperty ;
        rdfs:domain         :Grouping , :Junction ;
        rdfs:range          :Technology_Event , :Application_Service , :Technology_Interaction , :Application_Event , :System_Software , :Business_Role , :Technology_Process , :Course_of_Action , :Grouping , :Business_Interaction , :Business_Interface , :Device , :Business_Process , :Facility , :Business_Collaboration , :Technology_Service , :Application_Interaction , :Business_Actor , :Technology_Interface , :Node , :Application_Interface , :Capability , :Application_Component , :Application_Function , :Business_Function , :Technology_Collaboration , :Business_Service , :Application_Collaboration , :Equipment , :Junction ;
        rdfs:subPropertyOf  :ServingR .

:SourceRelationshipForInfluence
        a                   owl:ObjectProperty ;
        rdfs:domain         :Influence ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForInfluence .

:Access_relation_from_resource
        a                   owl:ObjectProperty ;
        rdfs:domain         :Resource ;
        rdfs:range          :Junction ;
        rdfs:subPropertyOf  :AccessR .

:inverse_of_SourceRelationshipForAssignment
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:ExternalActiveStructureElement
        a                owl:Class ;
        rdfs:comment     "An external active structure element, called an interface, represents a point of access where one or more services are provided to the environment."@en ;
        rdfs:subClassOf  :ActiveStructureElement .

:Access_relation_from_accessor_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Accessor_Type1 ;
        rdfs:range          :Representation , :Business_Object , :Grouping , :Artifact , :Junction , :Material , :Data_Object , :Contract ;
        rdfs:subPropertyOf  :AccessR .

:Assessment  a           owl:Class ;
        rdfs:subClassOf  :MotivationElement , :Influencer_Type2 .

:Path   a                owl:Class ;
        rdfs:comment     "A path is used to model the logical communication (or distribution) relations between nodes. It is realized by one or more communication networks (or distribution networks when modeling physical elements; see Chapter 11), which represent the physical communication (or distribution ) links. The properties (e.g., bandwidth, latency) of a path are usually aggregated from these underlying networks.\nA path connects two or more nodes. A path is realized by one or more networks. A path can aggregate nodes."@en , "A path represents a link between two or more nodes, through which these nodes can exchange data or material."@en ;
        rdfs:subClassOf  :Accessor_Type1 , :Serving_Type1 , :Triggering_Type1 , :TechnologyPhysicalElement , :Source_Type2 , :Influencer_Type1 , :InternalActiveStructureElement .

:Specialization_relation_from_applicationService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Service ;
        rdfs:range          :Grouping , :Application_Service ;
        rdfs:subPropertyOf  :SpecializationR .

:SourceRelationshipForComposition
        a                   owl:ObjectProperty ;
        rdfs:domain         :Composition ;
        rdfs:subPropertyOf  :SourceRelationship ;
        owl:inverseOf       :inverse_of_SourceRelationshipForComposition .

:OrJunction  a           owl:Class ;
        rdfs:subClassOf  :Junction .

:Material  a             owl:Class ;
        rdfs:comment     "Material represents tangible physical matter, with attributes such as size and weight. It is typically used to model raw materials and physical products, and also energy sources such as fuel. Material can be accessed by physical processes.\nThe name of material should be a noun. Pieces of material may be composed of other pieces of material."@en , "Material represents tangible physical matter or physical elements."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Influencer_Type2 .

:inverse_of_SourceRelationshipForAssociation
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:AggregationR  a                owl:ObjectProperty ;
        rdfs:subPropertyOf      :StructuralRelationship ;
        owl:inverseOf           :Inverse_of_aggregation ;
        owl:propertyChainAxiom  ( :inverse_of_SourceRelationshipForAggregation :TargetRelationshipForAggregation ) ;
        owl:propertyChainAxiom  ( :CompositionR :AggregationR ) ;
        owl:propertyChainAxiom  ( :AggregationR :CompositionR ) ;
        owl:propertyChainAxiom  ( :AggregationR :AggregationR ) .

:Deliverable  a          owl:Class ;
        rdfs:comment     "Work packages produce deliverables. These may be results of any kind; e.g., reports, papers, services, software, physical products, etc., or intangible results such as organizational change. A deliverable may also be the implementation of (a part of) an architecture."@en , "Often, deliverables are contractually specified and in turn formally reviewed, agreed, and signed off by the stakeholders as is, for example, prescribed by the TOGAF framework"@en , "A deliverable represents a precisely-defined outcome of a work package."@en ;
        rdfs:subClassOf  :Realization_Type1 , :Influencer_Type2 , :ImplementationMigrationElement .

:Aggregated_by_businessRole
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Role ;
        rdfs:range          :Grouping , :Business_Role , :Business_Interface ;
        rdfs:subPropertyOf  :AggregationR .

:PreDefinedProfile  a    owl:Class ;
        rdfs:comment     "hese are profiles that have a predefined attribute structure and can be implemented beforehand in any tool supporting the ArchiMate language. Examples of such profiles are sets of attributes for ArchiMate elements and relationships that have to be specified in order to execute common types of analysis."@en ;
        rdfs:subClassOf  :Profile .

:Profile  a              owl:Class ;
        rdfs:comment     "A profile is a data structure which can be defined separately from the ArchiMate language, but can be dynamically coupled with elements or relationships; i.e., the user of the language is free to decide whether and when the assignment of a profile to a model element is necessary. Profiles are specified as sets of typed attributes. Each of these attributes may have a default value that can be changed by the user."@en ;
        rdfs:subClassOf  :CustomizationElement .

:Realization_relation_from_realization_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Realization_Type1 ;
        rdfs:range          :Principle , :Requirement , :Grouping , :Goal , :Junction , :Outcome , :Constraint ;
        rdfs:subPropertyOf  :RealizationR .

:Aggregated_by_representation
        a                   owl:ObjectProperty ;
        rdfs:domain         :Representation ;
        rdfs:range          :Representation , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Application_Interaction
        a                owl:Class ;
        rdfs:comment     "An application interaction represents a unit of collective application behavior performed by (a collaboration of) two or more application components."@en , "An application interaction describes the collective behavior that is performed by the components that participate in an application collaboration. This may, for example, include the communication pattern between these components. An application interaction can also specify the externally visible behavior needed to realize an application service. The details of the interaction between the application components involved in an application interaction can be expressed during the detailed application design using, for example, a UML interaction diagram.\nAn application collaboration may be assigned to an application interaction. An application interaction may realize an application service. Application services and technology services may serve an application interaction. An application interaction may access data objects. The name of an application interaction should clearly identify a series of application behaviors; e.g., “Client profile creation” or “Update customer records”."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :Interaction , :Influencer_Type1 , :ApplicationElement , :Accessor_Type1 .

:StructureElement  a     owl:Class ;
        rdfs:comment     "These three aspects – active structure, behavior, and passive structure – have been inspired by natural language, where a sentence has a subject (active structure), a verb (behavior), and an object (passive structure)."@en ;
        rdfs:subClassOf  :ArchiMateModelingEntity .

:Aggregated_by_applicationService
        a                   owl:ObjectProperty ;
        rdfs:domain         :Application_Service ;
        rdfs:range          :Grouping , :Application_Service ;
        rdfs:subPropertyOf  :AggregationR .

:Technology_Service  a   owl:Class ;
        rdfs:comment     "A technology service represents an explicitly defined exposed technology behavior."@en , "A technology service exposes the functionality of a node to its environment. This functionality is accessed through one or more technology interfaces. It may require, use, and produce artifacts.\nA technology service should be meaningful from the point of view of the environment; it should provide a unit of behavior that is, in itself, useful to its users, such as application components and nodes.\nTypical technology services may, for example, include messaging, storage, naming, and directory services. It may access artifacts; e.g., a file containing a message.\nA technology service may serve application components or nodes. A technology service is realized by a technology function or process. A technology service is exposed by a node by assigning technology interfaces to it. A technology service may access artifacts. A technology service may consist of sub-services.\nThe name of a technology service should preferably be a verb ending with “ing”; e.g., “messaging”. Also, a name explicitly containing the word “service” may be used."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :ExternalBehaviorElement , :Accessor_Type1 .

:Specialization_relation_from_technologyCollaboration
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Collaboration ;
        rdfs:range          :Technology_Collaboration , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:inverse_of_SourceRelationshipForServing
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:aggregation_005  a  :Aggregation , owl:NamedIndividual .

:TargetRelationshipForSpecialization
        a                   owl:ObjectProperty ;
        rdfs:domain         :Specialization ;
        rdfs:subPropertyOf  :TargetRelationship ;
        owl:inverseOf       :inverse_of_TargetRelationshipForSpecialization .

:Derivation_Rules_for_Dynamic_Relationships
        a                owl:Class ;
        rdfs:comment     "This rule also applies for a triggering relationship, but only in combination with an assignment relationship (not with other structural relationships):\n􏰀 If there is a triggering relationship r from element a to element b, and an assignment relationship from element c to element a, a triggering relationship r can be derived from element c to element b.\n􏰀 If there is a triggering relationship r from element a to element b, and an assignment relationship from element d to element b, a triggering relationship r can be derived from element a to element d."@en , "Moreover, triggering relationships are transitive:\n􏰀 If there is a triggering relationship from element a to element b, and a triggering relationship from element b to element c, a triggering relationship can be derived from element a to element c."@en , "For the two dynamic relationships, the following rules apply:\n􏰀 If there is a flow relationship r from element a to element b, and a structural relationship from element c to element a, a flow relationship r can be derived from element c to element b.\n􏰀 If there is a flow relationship r from element a to element b, and a structural relationship from element d to element b, a flow relationship r can be derived from element a to element d.\nThese rules can be applied repeatedly. Informally, this means that the begin and/or endpoint of a flow relationship can be transferred ‘backward’ in a chain of elements connected by structural relationships. Example 16 shows two of the possible flow relationships that can be derived with these rules, given a flow relationship between the two services."@en ;
        rdfs:subClassOf  :Derivation_Rule .

:inverse_of_TargetRelationshipForComposition
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Technology_Event  a     owl:Class ;
        rdfs:comment     "Technology functions and other technology behavior may be triggered or interrupted by a technology event. Also, technology functions may raise events that trigger other infrastructure behavior. Unlike processes, functions, and interactions, an event is instantaneous: it does not have duration. Events may originate from the environment of the organization, but also internal events may occur generated by, for example, other devices within the organization.\nA technology event may have a time attribute that denotes the moment or moments at which the event happens. For example, this can be used to model time schedules; e.g., to model an event that triggers a recurring infrastructure function such as making a daily backup.\nA technology event may trigger or be triggered (raised) by a technology function, process, or interaction. A technology event may access a data object and may be composed of other technology events. The name of a technology event should preferably be a verb in the perfect tense; e.g., “message received”."@en , "A technology event is a technology behavior element that denotes a state change."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Influencer_Type1 , :Event , :Accessor_Type1 .

:Event  a                owl:Class ;
        rdfs:comment     "An event is a behavior element that denotes a state change."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :BehaviourElement .

:Aggregated_by_technologyInterface
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Interface ;
        rdfs:range          :Technology_Interface , :Grouping ;
        rdfs:subPropertyOf  :AggregationR .

:Product  a              owl:Class ;
        rdfs:comment     "This definition covers both intangible, services-based, or information products that are common in information-intensive organizations, and tangible, physical products. A financial or information product consists of a collection of services, and a contract that specifies the characteristics, rights, and requirements associated with the product. “Buying” a product gives the customer the right to use the associated services.\nGenerally, the product element is used to specify a product type. The number of product types in an organization is typically relatively stable compared to, for example, the processes that realize or support the products. “Buying” is usually one of the services associated with a product, which results in a new instance of that product (belonging to a specific customer). Similarly, there may be services to modify or destroy a product.\nA product may aggregate or compose business services, application services, and technology services, business objects, data objects, and technology objects, as well as a contract. Hence a product may aggregate or compose elements from other layers than the Business Layer.\nA value may be associated with a product. The name of a product is usually the name which is used in the communication with customers, or possibly a more generic noun (e.g., “travel insurance”)."@en , "A product represents a coherent collection of services and/or passive structure elements, accompanied by a contract/set of agreements, which is offered as a whole to (internal or external) customers."@en ;
        rdfs:subClassOf  :Source_Type2 , :Serving_Type1 , :PassiveStructureElement , :Influencer_Type1 , :CompositeElement , :BusinessElement .

:Aggregated_by_businessCollaboration
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Collaboration ;
        rdfs:range          :Grouping , :Business_Role , :Business_Interface , :Business_Collaboration , :Business_Actor ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_value
        a                   owl:ObjectProperty ;
        rdfs:domain         :Value ;
        rdfs:range          :Value , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Specialization_relation_from_material
        a                   owl:ObjectProperty ;
        rdfs:domain         :Material ;
        rdfs:range          :Material , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Technology_Function  a  owl:Class ;
        rdfs:comment     "A technology function represents a collection of technology behavior that can be performed by a node."@en , "A technology function describes the internal behavior of a node; for the user of a node that performs a technology function, this function is invisible. If its behavior is exposed externally, this is done through one or more technology services. A technology function abstracts from the way it is implemented. Only the necessary behavior is specified.\nA technology function may realize technology services. Technology services of other technology functions may serve technology functions. A technology function may access technology objects. A node may be assigned to a technology function (which means that the node performs the technology function). The name of a technology function should preferably be a verb ending with “ing”."@en ;
        rdfs:subClassOf  :TechnologyPhysicalElement , :Source_Type2 , :Serving_Type1 , :Influencer_Type1 , :Function , :Accessor_Type1 .

:Specialization_relation_from_technologyEvent
        a                   owl:ObjectProperty ;
        rdfs:domain         :Technology_Event ;
        rdfs:range          :Technology_Event , :Grouping ;
        rdfs:subPropertyOf  :SpecializationR .

:Overview  a          :Aspect , owl:NamedIndividual ;
        rdfs:comment  "The overview abstraction level addresses both multiple layers and multiple aspects. Typically, such overviews are addressed to Enterprise Architects and decision- makers, such as CEOs and CIOs." .

:ArchiMateViewpoint  a   owl:Class ;
        rdfs:subClassOf  :ArchitectureViewpoint .

:Serving_Type1  a  owl:Class .

:Specialization_relation_from_gap
        a                   owl:ObjectProperty ;
        rdfs:domain         :Gap ;
        rdfs:range          :Grouping , :Gap ;
        rdfs:subPropertyOf  :SpecializationR .

:ApplicationElement  a   owl:Class ;
        rdfs:comment     "The Application Layer is typically used to model the information systems architectures of the enterprise, including the application architecture that, as defined by the TOGAF framework [4], describes the structure and interaction of the applications."@en ;
        rdfs:subClassOf  :Realization_Type1 , :ArchiMateModelingEntity .

:Informing  a         :Purpose , owl:NamedIndividual ;
        rdfs:comment  "Informing viewpoints help to inform any stakeholder about the Enterprise Architecture, in order to achieve understanding, obtain commitment, and convince adversaries. Typical examples are illustrations, animations, cartoons, flyers, etc." .

:Coherence  a         :Aspect , owl:NamedIndividual ;
        rdfs:comment  "At the coherence abstraction level, multiple layers or multiple aspects are spanned. Extending the view to more than one layer or aspect enables the stakeholder to focus on architecture relationships like process-uses-system (multiple layer) or application-uses-object (multiple aspect). Typical stakeholders are operational managers responsible for a collection of IT services or business processes." .

:Communication_Network
        a                owl:Class ;
        rdfs:comment     "A communication network represents a set of structures that connects computer systems or other electronic devices for transmission, routing, and reception of data or data-based communications such as voice and video."@en , "A communication network represents the physical communication infrastructure. It represents ”a set of products, concepts, and services that enable the connection of computer systems or devices for the purpose of transmitting data and other forms (e.g., voice and video) between the systems”, as defined by the TOGAF framework [4].\nA communication network connects two or more devices. The most basic communication network is a single link between two devices, but it may comprise multiple links and associated network equipment. A network has properties such as bandwidth and latency. A communication network realizes one or more paths. It embodies the physical realization of the logical path between nodes.\nA communication network can consist of sub-networks. It can aggregate devices and system software, for example, to model the routers, switches, and firewalls that are part of the network infrastructure."@en ;
        rdfs:subClassOf  :Triggering_Type1 , :TechnologyPhysicalElement , :Influencer_Type1 , :Source_Type2 , :Accessor_Type1 , :Serving_Type1 , :InternalActiveStructureElement .

:Specialization_relation_from_businessActor
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Actor ;
        rdfs:range          :Grouping , :Business_Actor ;
        rdfs:subPropertyOf  :SpecializationR .

:inverse_of_TargetRelationshipForServing
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :TargetRelationship .

:Inverse_of_association
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :OtherRelationship .

:Inverse_of_specialization
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :OtherRelationship ;
        owl:inverseOf       :SpecializationR .

:inverse_of_SourceRelationshipForTriggering
        a                   owl:ObjectProperty ;
        rdfs:subPropertyOf  :SourceRelationship .

:OtherRelationship  a    owl:Class , owl:ObjectProperty ;
        rdfs:comment     "Other relationships, which do not fall into one of the above categories"^^rdfs:Literal ;
        rdfs:subClassOf  :ArchiMateModelingRelation .

:Aggregated_by_path  a      owl:ObjectProperty ;
        rdfs:domain         :Path ;
        rdfs:range          :Device , :System_Software , :Path , :Technology_Interface , :Grouping , :Facility , :Technology_Collaboration , :Equipment , :Node ;
        rdfs:subPropertyOf  :AggregationR .

:Specialization_relation_from_businessFunction
        a                   owl:ObjectProperty ;
        rdfs:domain         :Business_Function ;
        rdfs:range          :Grouping , :Business_Function ;
        rdfs:subPropertyOf  :SpecializationR .

:Accessor_Type1  a  owl:Class .

:Flow_relation_from_source_type1
        a                   owl:ObjectProperty ;
        rdfs:domain         :Source_Type1 ;
        rdfs:range          :Resource , :Junction , :Grouping , :Course_of_Action , :Capability ;
        rdfs:subPropertyOf  :FlowR .

:Aggregated_by_driver
        a                   owl:ObjectProperty ;
        rdfs:domain         :Driver ;
        rdfs:range          :Grouping , :Driver ;
        rdfs:subPropertyOf  :AggregationR .